<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps on Engineer taking Dev?Ops notes</title>
    <link>https://dexterposh.github.io/categories/devops/</link>
    <description>Recent content in DevOps on Engineer taking Dev?Ops notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 May 2021 10:47:38 +0530</lastBuildDate>
    
	<atom:link href="https://dexterposh.github.io/categories/devops/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Azure Vms Resource Graph Queries</title>
      <link>https://dexterposh.github.io/posts/013-az-vms-resource-graph/</link>
      <pubDate>Mon, 24 May 2021 10:47:38 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/013-az-vms-resource-graph/</guid>
      <description>&lt;h2 id=&#34;why-use-resource-graph-instead-az-cli-powershell&#34;&gt;Why use Resource Graph instead Az CLI/ PowerShell?&lt;/h2&gt;
&lt;p&gt;If we want to search for resources meeting certain criteria across all our subscriptions, we can&amp;rsquo;t use Az CLI or Az PowerShell to do this type of queries since it would require a lot of overhead to filter and switch between subscription contexts.&lt;/p&gt;
&lt;p&gt;Pesudo-Code (not so performant)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Foreach subscription in subscriptions:
    set Az Context
    Get the VMs, Filter based on criteria
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Resource Graph queries can help here, as they can be used to fetch metadata about the resource and then after their presence is validated, maybe perform some operation on it. With PowerShell we can even group these resources together based on SubscriptionID and then iterate over each subscription (set the right context) and perform actions.&lt;/p&gt;
&lt;p&gt;Pesudo-Code (single query and performant)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Query Azure Graph for resources based on criteria across all the subscriptions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this post, I share some of the Resource Graph Queries I have found useful while working with Virtual Machines.&lt;/p&gt;
&lt;h2 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h2&gt;
&lt;p&gt;Prerequisite is the Az CLI (with graph extension) or Az.ResourceGraph PowerShell module which supports this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install the Resource Graph module from PowerShell Gallery&lt;/span&gt;
Install-Module -Name Az.ResourceGraph
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Az CLI run the below to install the extension:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add the Resource Graph extension to the Azure CLI environment&lt;/span&gt;
az extension add --name resource-graph
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;virtual-machine-queries&#34;&gt;Virtual Machine Queries&lt;/h2&gt;
&lt;p&gt;Below are list of queries for Virtual machines.&lt;/p&gt;
&lt;h3 id=&#34;find-virtual-machine-with-name&#34;&gt;Find Virtual Machine with Name&lt;/h3&gt;
&lt;p&gt;If you want to find out if a virtual machine is present across all the subscriptions you have access to, you can use the below Resource graph query with Az CLI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Using Az.ResourceGraph Module&lt;/span&gt;
Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and name == &amp;#39;testvm01&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now for most of the queries in this post, you can do one to one translation to Az CLI commands by extracting the query and using it, I prefer to use PowerShell and that will be used in the rest of the examples.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Using AZ CLI&lt;/span&gt;
az graph query -q &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and Name == &amp;#39;testvm01&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;find-virtual-machines-with-name-regex-matching&#34;&gt;Find Virtual machines with name regex matching&lt;/h3&gt;
&lt;p&gt;Note - This regex matching can be applied to any resource or any property defined in the Resource schema as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and name matches regex &amp;#39;test-[0-9].*&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;find-virtual-machines-with-a-specific-tag&#34;&gt;Find Virtual machines with a specific tag&lt;/h3&gt;
&lt;p&gt;Gist is Kusto allows for filtering at all the levels, so we can filter based on a specific tag or can chain multiple tags to filter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Filter based on a tag called the department&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Note that tags are case-sensitive&lt;/span&gt;
Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and tags.department =~ &amp;#39;ITDepartment&amp;#39;&amp;#34;&lt;/span&gt;
 
 
&lt;span style=&#34;color:#75715e&#34;&gt;# Filter based on the groupEmail name&lt;/span&gt;
Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; | where tags.group =~ &amp;#39;SRE&amp;#39;&amp;#34;&lt;/span&gt;
 
&lt;span style=&#34;color:#75715e&#34;&gt;# Combine both the department &amp;amp; group&lt;/span&gt;
 Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; | where tags.group =~ &amp;#39;SRE&amp;#39; or tags.department =~ &amp;#39;ITDepartment&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;find-virtual-machines-deployed-using-marketplace-images&#34;&gt;Find Virtual machines deployed using MarketPlace images&lt;/h3&gt;
&lt;p&gt;This query utilizes the fact that the publisher field for a market place will not be empty.&lt;/p&gt;
&lt;p&gt;Note - Remove the end &amp;lsquo;limit&amp;rsquo; command expression at the end of query if you need the exhaustive list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and isnotempty(properties.storageProfile.imageReference.publisher)|  limit 1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;find-virtual-machines-deployed-using-custom-images&#34;&gt;Find Virtual machines deployed using custom Images&lt;/h3&gt;
&lt;p&gt;This query utilizes the fact that the publisher field does not exist for a VM deployed using a generalized image.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - Remove the end &amp;lsquo;limit&amp;rsquo; command expression at the end of query if you need the exhaustive list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and isempty(properties.storageProfile.imageReference.publisher)| limit 1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;find-virtual-machines-which-do-not-have-a-tag-populated&#34;&gt;Find Virtual machines which do not have a Tag populated&lt;/h3&gt;
&lt;p&gt;In this example the query checks for VMs which do not have a specific tag named Department created but not populated.&lt;/p&gt;
&lt;p&gt;Note - Remove the end &amp;lsquo;limit&amp;rsquo; command expression at the end of query if you need the exhaustive list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and isempty(tags.group)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| project name, location, resourceGroup, subscriptionId, Group=tags.group
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| limit 5&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;find-virtual-machine-with-an-ipaddress&#34;&gt;Find Virtual machine with an IPAddress&lt;/h3&gt;
&lt;p&gt;This can simply be done by doing a reverse lookup of the IPaddress but in some cases where the machines did not have these DNS records created it was a pain.&lt;/p&gt;
&lt;p&gt;We start by looking for network interfaces which have this IP address&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$nic = Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Network/networkInterfaces&amp;#39; |
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;where properties.ipConfigurations[0].properties.privateIPAddress == &amp;#39;10.10.10.6&amp;#39;&amp;#34;&lt;/span&gt;
 
$nic.properties.virtualMachine.id &lt;span style=&#34;color:#75715e&#34;&gt;# this is the resource ID of the VM&lt;/span&gt;
 
&lt;span style=&#34;color:#75715e&#34;&gt;# Now we can fire off another query to get the VM info&lt;/span&gt;
Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and id == &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;$($nic.properties.virtualMachine.id)&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gather-extra-virtual-machine-information&#34;&gt;Gather extra Virtual Machine information&lt;/h3&gt;
&lt;p&gt;To gather the relevant information for different VM resources e.g. network, storage, subscription etc, one can use PowerShell to extend the object returned from the resource graph query.&lt;/p&gt;
&lt;p&gt;Below I show usage of a crude way of using PowerShell to do this e.g. using a filter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Filter&lt;/span&gt; GetVMInfo {
    $networkQuery = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Network/networkInterfaces&amp;#39; and id == &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;$($PSItem.properties.networkProfile.networkInterfaces[0].id)&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    $network = Search-AzGraph -Query $networkQuery
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[pscustomObject]&lt;/span&gt;@{
        Name = $PSItem.name
        Location = $PSItem.location
        Tags = $PSItem.Tags
        ResourceGroup = $PSItem.resourceGroup
        SubscriptionID = $PSItem.subscriptionId
        SubscriptionName = (Get-AzSubscription -SubscriptionId $PSItem.subscriptionId).Name
        ProvisioningState = $PSItem.properties.provisioningState
        VMSize = $PSItem.properties.hardwareProfile.vmSize
        BaseOSImage = $PSItem.properties.storageProfile.imageReference.id.Split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)[-1]
        OSType = $PSItem.properties.storageProfile.osDisk.osType
        OSDiskSize = $PSItem.properties.storageProfile.osDisk.diskSizeGB
        DataDisks = &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ($disk &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; $PSItem.properties.storageProfile.dataDisks) {
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name = {0}, Size = {1}, IsManaged = &lt;/span&gt;$(&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($disk.managedDisk) { $true} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {$false})&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt; $disk.name, $disk.diskSizeGB
                    }
        IPAddress = $network.properties.ipConfigurations[0].properties.privateIPAddress
        SubnetName = $network.properties.ipConfigurations[0].properties.subnet.id.Split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)[-1]
        DNSservers = @($network.properties.dnsSettings.dnsServers)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use the above filter like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Search for the VM first using the Az Resurce Graph&lt;/span&gt;
$VM = Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and name == &amp;#39;testvm01&amp;#39;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Pipe the object(s) found to the filter we defined&lt;/span&gt;
$VM | GetVMInfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Azure Resource Graph is a powerful CMDB solution for querying Azure resources, they can be used wisely to enhance existing scripts or create new robust and scalable automations.&lt;/p&gt;
</description> 
    </item>
    
  </channel>
</rss>

