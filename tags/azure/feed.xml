<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>azure on Engineer taking Dev?Ops notes</title>
    <link>https://dexterposh.github.io/tags/azure/</link>
    <description>Recent content in azure on Engineer taking Dev?Ops notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 May 2021 10:47:38 +0530</lastBuildDate>
    
	<atom:link href="https://dexterposh.github.io/tags/azure/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Azure Vms Resource Graph Queries</title>
      <link>https://dexterposh.github.io/posts/013-az-vms-resource-graph/</link>
      <pubDate>Mon, 24 May 2021 10:47:38 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/013-az-vms-resource-graph/</guid>
      <description>&lt;h2 id=&#34;why-use-resource-graph-instead-az-cli-powershell&#34;&gt;Why use Resource Graph instead Az CLI/ PowerShell?&lt;/h2&gt;
&lt;p&gt;If we want to search for resources meeting certain criteria across all our subscriptions, we can&amp;rsquo;t use Az CLI or Az PowerShell to do this type of queries since it would require a lot of overhead to filter and switch between subscription contexts.&lt;/p&gt;
&lt;p&gt;Pesudo-Code (not so performant)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Foreach subscription in subscriptions:
    set Az Context
    Get the VMs, Filter based on criteria
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Resource Graph queries can help here, as they can be used to fetch metadata about the resource and then after their presence is validated, maybe perform some operation on it. With PowerShell we can even group these resources together based on SubscriptionID and then iterate over each subscription (set the right context) and perform actions.&lt;/p&gt;
&lt;p&gt;Pesudo-Code (single query and performant)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Query Azure Graph for resources based on criteria across all the subscriptions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this post, I share some of the Resource Graph Queries I have found useful while working with Virtual Machines.&lt;/p&gt;
&lt;h2 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h2&gt;
&lt;p&gt;Prerequisite is the Az CLI (with graph extension) or Az.ResourceGraph PowerShell module which supports this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install the Resource Graph module from PowerShell Gallery&lt;/span&gt;
Install-Module -Name Az.ResourceGraph
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Az CLI run the below to install the extension:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add the Resource Graph extension to the Azure CLI environment&lt;/span&gt;
az extension add --name resource-graph
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;virtual-machine-queries&#34;&gt;Virtual Machine Queries&lt;/h2&gt;
&lt;p&gt;Below are list of queries for Virtual machines.&lt;/p&gt;
&lt;h3 id=&#34;find-virtual-machine-with-name&#34;&gt;Find Virtual Machine with Name&lt;/h3&gt;
&lt;p&gt;If you want to find out if a virtual machine is present across all the subscriptions you have access to, you can use the below Resource graph query with Az CLI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Using Az.ResourceGraph Module&lt;/span&gt;
Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and name == &amp;#39;testvm01&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now for most of the queries in this post, you can do one to one translation to Az CLI commands by extracting the query and using it, I prefer to use PowerShell and that will be used in the rest of the examples.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Using AZ CLI&lt;/span&gt;
az graph query -q &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and Name == &amp;#39;testvm01&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;find-virtual-machines-with-name-regex-matching&#34;&gt;Find Virtual machines with name regex matching&lt;/h3&gt;
&lt;p&gt;Note - This regex matching can be applied to any resource or any property defined in the Resource schema as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and name matches regex &amp;#39;test-[0-9].*&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;find-virtual-machines-with-a-specific-tag&#34;&gt;Find Virtual machines with a specific tag&lt;/h3&gt;
&lt;p&gt;Gist is Kusto allows for filtering at all the levels, so we can filter based on a specific tag or can chain multiple tags to filter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Filter based on a tag called the department&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Note that tags are case-sensitive&lt;/span&gt;
Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and tags.department =~ &amp;#39;ITDepartment&amp;#39;&amp;#34;&lt;/span&gt;
 
 
&lt;span style=&#34;color:#75715e&#34;&gt;# Filter based on the groupEmail name&lt;/span&gt;
Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; | where tags.group =~ &amp;#39;SRE&amp;#39;&amp;#34;&lt;/span&gt;
 
&lt;span style=&#34;color:#75715e&#34;&gt;# Combine both the department &amp;amp; group&lt;/span&gt;
 Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; | where tags.group =~ &amp;#39;SRE&amp;#39; or tags.department =~ &amp;#39;ITDepartment&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;find-virtual-machines-deployed-using-marketplace-images&#34;&gt;Find Virtual machines deployed using MarketPlace images&lt;/h3&gt;
&lt;p&gt;This query utilizes the fact that the publisher field for a market place will not be empty.&lt;/p&gt;
&lt;p&gt;Note - Remove the end &amp;lsquo;limit&amp;rsquo; command expression at the end of query if you need the exhaustive list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and isnotempty(properties.storageProfile.imageReference.publisher)|  limit 1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;find-virtual-machines-deployed-using-custom-images&#34;&gt;Find Virtual machines deployed using custom Images&lt;/h3&gt;
&lt;p&gt;This query utilizes the fact that the publisher field does not exist for a VM deployed using a generalized image.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - Remove the end &amp;lsquo;limit&amp;rsquo; command expression at the end of query if you need the exhaustive list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and isempty(properties.storageProfile.imageReference.publisher)| limit 1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;find-virtual-machines-which-do-not-have-a-tag-populated&#34;&gt;Find Virtual machines which do not have a Tag populated&lt;/h3&gt;
&lt;p&gt;In this example the query checks for VMs which do not have a specific tag named Department created but not populated.&lt;/p&gt;
&lt;p&gt;Note - Remove the end &amp;lsquo;limit&amp;rsquo; command expression at the end of query if you need the exhaustive list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and isempty(tags.group)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| project name, location, resourceGroup, subscriptionId, Group=tags.group
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| limit 5&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;find-virtual-machine-with-an-ipaddress&#34;&gt;Find Virtual machine with an IPAddress&lt;/h3&gt;
&lt;p&gt;This can simply be done by doing a reverse lookup of the IPaddress but in some cases where the machines did not have these DNS records created it was a pain.&lt;/p&gt;
&lt;p&gt;We start by looking for network interfaces which have this IP address&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$nic = Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Network/networkInterfaces&amp;#39; |
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;where properties.ipConfigurations[0].properties.privateIPAddress == &amp;#39;10.10.10.6&amp;#39;&amp;#34;&lt;/span&gt;
 
$nic.properties.virtualMachine.id &lt;span style=&#34;color:#75715e&#34;&gt;# this is the resource ID of the VM&lt;/span&gt;
 
&lt;span style=&#34;color:#75715e&#34;&gt;# Now we can fire off another query to get the VM info&lt;/span&gt;
Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and id == &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;$($nic.properties.virtualMachine.id)&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gather-extra-virtual-machine-information&#34;&gt;Gather extra Virtual Machine information&lt;/h3&gt;
&lt;p&gt;To gather the relevant information for different VM resources e.g. network, storage, subscription etc, one can use PowerShell to extend the object returned from the resource graph query.&lt;/p&gt;
&lt;p&gt;Below I show usage of a crude way of using PowerShell to do this e.g. using a filter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Filter&lt;/span&gt; GetVMInfo {
    $networkQuery = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Network/networkInterfaces&amp;#39; and id == &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;$($PSItem.properties.networkProfile.networkInterfaces[0].id)&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    $network = Search-AzGraph -Query $networkQuery
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[pscustomObject]&lt;/span&gt;@{
        Name = $PSItem.name
        Location = $PSItem.location
        Tags = $PSItem.Tags
        ResourceGroup = $PSItem.resourceGroup
        SubscriptionID = $PSItem.subscriptionId
        SubscriptionName = (Get-AzSubscription -SubscriptionId $PSItem.subscriptionId).Name
        ProvisioningState = $PSItem.properties.provisioningState
        VMSize = $PSItem.properties.hardwareProfile.vmSize
        BaseOSImage = $PSItem.properties.storageProfile.imageReference.id.Split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)[-1]
        OSType = $PSItem.properties.storageProfile.osDisk.osType
        OSDiskSize = $PSItem.properties.storageProfile.osDisk.diskSizeGB
        DataDisks = &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ($disk &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; $PSItem.properties.storageProfile.dataDisks) {
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name = {0}, Size = {1}, IsManaged = &lt;/span&gt;$(&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($disk.managedDisk) { $true} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {$false})&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt; $disk.name, $disk.diskSizeGB
                    }
        IPAddress = $network.properties.ipConfigurations[0].properties.privateIPAddress
        SubnetName = $network.properties.ipConfigurations[0].properties.subnet.id.Split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)[-1]
        DNSservers = @($network.properties.dnsSettings.dnsServers)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use the above filter like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Search for the VM first using the Az Resurce Graph&lt;/span&gt;
$VM = Search-AzGraph -Query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;where type =~ &amp;#39;Microsoft.Compute/VirtualMachines&amp;#39; and name == &amp;#39;testvm01&amp;#39;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Pipe the object(s) found to the filter we defined&lt;/span&gt;
$VM | GetVMInfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Azure Resource Graph is a powerful CMDB solution for querying Azure resources, they can be used wisely to enhance existing scripts or create new robust and scalable automations.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>PowerShell Classes - Validating ARM parameters</title>
      <link>https://dexterposh.github.io/posts/007-pwsh-class-usecase/</link>
      <pubDate>Mon, 29 Jun 2020 19:42:59 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/007-pwsh-class-usecase/</guid>
      <description>&lt;h2 id=&#34;origin&#34;&gt;Origin❓&lt;/h2&gt;
&lt;p&gt;(shameless plug, alert!) 🙃&lt;/p&gt;
&lt;p&gt;Recently, I was discussing with my colleague about this new &lt;a href=&#34;https://leanpub.com/powershell-to-csharp&#34;&gt;book&lt;/a&gt; I am co-authoring (with &lt;a href=&#34;https://twitter.com/singhprateik&#34;&gt;Prateek&lt;/a&gt;) about why to learn .NET to be a better PowerShell programmer and upon further discussion we pondered some interesting ways to use PowerShell classes.&lt;/p&gt;
&lt;h2 id=&#34;brain-storming-&#34;&gt;Brain-storming 🤔&lt;/h2&gt;
&lt;p&gt;All was lost, until we had another quick conversation about how to validate ARM templates.
Well, I suggested to write Pester tests to check the input being passed and perform &lt;code&gt;Test-AzDeployment&lt;/code&gt; for ARM templates.&lt;/p&gt;
&lt;p&gt;Another idea that popped up in my mind was what if we write a PowerShell class to model the ARM parameters file and use that to validate the ARM template parameter inputs.&lt;/p&gt;
&lt;h2 id=&#34;solution-&#34;&gt;Solution 🚀&lt;/h2&gt;
&lt;p&gt;There exists the &lt;a href=&#34;https://github.com/dfinke/ConvertToClass&#34;&gt;ConvertToClass&lt;/a&gt; module by Doug Finke, which comes to the rescue to automatically convert a JSON object to a PowerShell class. It even has VSCode integration, check it out.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start by taking a sample &lt;code&gt;azuredeploy.parameters.json&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Azurearm6754&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westus2&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;convert-json-to-class-&#34;&gt;Convert Json to Class ☯&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s run the &lt;code&gt;ConverTo-Class&lt;/code&gt; function in the ConvertToClass module against this &lt;code&gt;azuredeploy.parameters.json&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;ConvertTo-Class -Target (Get-Content ./azuredeploy.parameters.json -Raw)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/007/class1.png&#34; alt=&#34;alt&#34;&gt;&lt;/p&gt;
&lt;p&gt;Above command generates below content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;class RootObject1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$$schema
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$contentVersion
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[parameters]&lt;/span&gt;$parameters
}

class parameters1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[storageAccountNamePrefix]&lt;/span&gt;$storageAccountNamePrefix
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[numberofStorageAccounts]&lt;/span&gt;$numberofStorageAccounts
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[storageAccountType]&lt;/span&gt;$storageAccountType
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[location]&lt;/span&gt;$location
}

class storageAccountNamePrefix1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class numberofStorageAccounts1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[int]&lt;/span&gt;$value
}

class storageAccountType1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class location1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s rename the above classes like below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$$schema&lt;/code&gt; property on &lt;code&gt;RootObject1&lt;/code&gt; to &lt;code&gt;${$schema}&lt;/code&gt;, done to escape &lt;code&gt;$&lt;/code&gt; char in property name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RootObject1&lt;/code&gt; to &lt;code&gt;AzureParameters&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parameters1&lt;/code&gt; to &lt;code&gt;Parameters&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storageAccountNamePrefix1&lt;/code&gt; to &lt;code&gt;StorageAccountType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numberofStorageAccounts1&lt;/code&gt; to &lt;code&gt;StorageAccountType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storageAccountType1&lt;/code&gt; to &lt;code&gt;StorageAccountType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location1&lt;/code&gt; to &lt;code&gt;Location&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;add-validation-attributes-&#34;&gt;Add validation attributes 🔨&lt;/h3&gt;
&lt;p&gt;We can add validation attributes to the property &lt;code&gt;$value&lt;/code&gt; present inside the auto-generated class to add some quick validation rules to the properties present on the class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note the name &lt;code&gt;$value&lt;/code&gt; is given to the property because this is how ARM parameters file take input.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;class AzureParameters {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;${$schema}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$contentVersion
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[Parameters]&lt;/span&gt;$parameters
}

class Parameters {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[StorageAccountNamePrefix]&lt;/span&gt;$storageAccountNamePrefix
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[NumberofStorageAccounts]&lt;/span&gt;$numberofStorageAccounts
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[StorageAccountType]&lt;/span&gt;$storageAccountType
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[Location]&lt;/span&gt;$location
}

class StorageAccountNamePrefix {
    &lt;span style=&#34;color:#75715e&#34;&gt;# validate the prefix length&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateLength&lt;/span&gt;(3,15)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class StorageAccountNamePrefix {
    &lt;span style=&#34;color:#75715e&#34;&gt;# restricting the min=1 and max=10 storage accounts that one can request&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateRange&lt;/span&gt;(1,10)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[int]&lt;/span&gt;$value
}

class StorageAccountType {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Restricting the StorageAccount SKUs&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateSet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_LRS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_GRS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_ZRS&amp;#39;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class Location {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Restricting the locations&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateSet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;westus2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;northcentralus&amp;#39;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;add-logic-inside-empty-constructor-&#34;&gt;Add logic inside Empty Constructor ⌛&lt;/h3&gt;
&lt;p&gt;We can add one more trick to the bag to add an empty constructor explicitly (this is present when no constructor exists) and put some more validation logic if the current validate attributes doesn&#39; suit the needs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;class AzureParameters {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;${$schema}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$contentVersion
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[Parameters]&lt;/span&gt;$parameters
}

class Parameters {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[StorageAccountNamePrefix]&lt;/span&gt;$storageAccountNamePrefix
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[NumberofStorageAccounts]&lt;/span&gt;$numberofStorageAccounts
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[StorageAccountType]&lt;/span&gt;$storageAccountType
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[Location]&lt;/span&gt;$location
}

class StorageAccountNamePrefix {
    &lt;span style=&#34;color:#75715e&#34;&gt;# validate the prefix length&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateLength&lt;/span&gt;(3,15)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class NumberofStorageAccounts {
    &lt;span style=&#34;color:#75715e&#34;&gt;# restricting the min=1 and max=10 storage accounts that one can request&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateRange&lt;/span&gt;(1,10)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[int]&lt;/span&gt;$value
}

class StorageAccountType {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Restricting the StorageAccount SKUs&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateSet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_LRS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_GRS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_ZRS&amp;#39;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value

    &lt;span style=&#34;color:#75715e&#34;&gt;# Add some more validation logic inside the empty constructor&lt;/span&gt;
    storageAccountType() {
        &lt;span style=&#34;color:#75715e&#34;&gt;# Perform some validation on the property&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($this.value &lt;span style=&#34;color:#f92672&#34;&gt;-ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_ZRS&amp;#39;&lt;/span&gt;) {
            &lt;span style=&#34;color:#75715e&#34;&gt;# you can perform more checks or logging, throwing a warning here&lt;/span&gt;
            Write-Warning -Message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No zone redundancy&amp;#34;&lt;/span&gt;
        }
    }
}

class Location {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Restricting the locations&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateSet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;westus2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;northcentralus&amp;#39;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Why does this has to be an empty constructor?
The answer is that we will be a using a trick with how we create an instance of the class in next section&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;secret-sauce--cast-initialization-&#34;&gt;Secret-Sauce : Cast-Initialization 🍲&lt;/h3&gt;
&lt;p&gt;Credit goes to Bruce Payette&amp;rsquo;s &lt;a href=&#34;https://livebook.manning.com/book/windows-powershell-in-action-third-edition/chapter-19/311&#34;&gt;Windows PowerShell in Action 3rd&lt;/a&gt; edition which talks a bit about this technique in brief.&lt;/p&gt;
&lt;p&gt;In short, you can take a hashtable or PSObjects and cast them as strongly type object instance. This will become more clear when we perform this casting a bit later.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For cast-initalization technique to work an empty constructor needs to be present in the Class definition. It is present by default if there is no constructor on the class present or you can add one explicitly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Modify some value in the &lt;code&gt;azuredeploy.parameters.json&lt;/code&gt; file to not-follow some validation logic we added e.g. putting the value for &lt;code&gt;numberofStorageAccount&lt;/code&gt; as &lt;code&gt;20&lt;/code&gt;, remember our &lt;code&gt;[ValidateRange(1,10)]&lt;/code&gt; attribute on the property should fails. See the parameters file below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurearm6754&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westus2&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, see the result when casting this as our &lt;code&gt;ArmParameters&lt;/code&gt; class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[azureparameters]&lt;/span&gt; (Get-Content -Path $PSScriptRoot/azuredeploy.parameters.json | ConvertFrom-Json)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/007/validation.png&#34; alt=&#34;Validation in Action&#34;&gt;&lt;/p&gt;
&lt;p&gt;Throws below error:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-error&#34; data-lang=&#34;error&#34;&gt;InvalidArgument: Cannot convert value &amp;quot;@{$schema=https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#; contentVersion=1.0.0.0; parameters=}&amp;quot; to type &amp;quot;AzureParameters&amp;quot;. Error: &amp;quot;Cannot convert value &amp;quot;@{storageAccountNamePrefix=; numberofStorageAccounts=; storageAccountType=; location=}&amp;quot; to type &amp;quot;Parameters&amp;quot;. Error: &amp;quot;Cannot create object of type &amp;quot;NumberofStorageAccounts&amp;quot;. The 20 argument is greater than the maximum allowed range of 10. Supply an argument that is less than or equal to 10 and then try the command again.&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Fix the value for the &lt;code&gt;numberofStorageAccounts&lt;/code&gt; parameter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurearm6754&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westus2&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the below again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[azureparameters]&lt;/span&gt; (Get-Content -Path $PSScriptRoot/azuredeploy.parameters.json | ConvertFrom-Json)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/007/valid.png&#34; alt=&#34;Validation passes&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion-&#34;&gt;Conclusion ✅&lt;/h2&gt;
&lt;p&gt;This is maybe a very basic way of validating input data but I read about a topic and used it to solve a problem in a unique way, which is a win for me 😎.&lt;/p&gt;
&lt;p&gt;I think slowly embracing more Object-Oriented programming using PowerShell classes (or C#) can open up some interesting ways to solve problems in my tooling.&lt;/p&gt;
&lt;h2 id=&#34;resource-links-&#34;&gt;Resource links 📚&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/powershell-to-csharp&#34;&gt;PowerShell to C# and back&lt;/a&gt; - Disclaimer: co-author on this one.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ridicurious.com/2020/06/29/powershell-to-csharp-and-back-classes/&#34;&gt;PowerShell to C# and Back – Introduction to Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://livebook.manning.com/book/windows-powershell-in-action-third-edition&#34;&gt;Windows PowerShell in Action, 3rd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dfinke/ConvertToClass&#34;&gt;Doug Finke&amp;rsquo;s ConvertToClass module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Stephanevg/PSClassUtils&#34;&gt;PSClassUtils&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description> 
    </item>
    
    <item>
      <title>ARM templates - iterate &amp; deploy resource</title>
      <link>https://dexterposh.github.io/posts/006-arm-template-loop/</link>
      <pubDate>Tue, 26 May 2020 15:18:35 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/006-arm-template-loop/</guid>
      <description>&lt;h2 id=&#34;background-&#34;&gt;Background 🧐&lt;/h2&gt;
&lt;p&gt;I like ARM templates, I use it a lot to deploy Azure cloud resources but as all things it has some pain points associated with it. In this post, let&amp;rsquo;s see how you can iterate over based on certain logic and deploy multiple resources using linked templates.&lt;/p&gt;
&lt;p&gt;As it stands out this logic of iterating over and deploying multiple instances of a resource tripped me a lot in the beginning.&lt;/p&gt;
&lt;h2 id=&#34;walkthrough-&#34;&gt;Walkthrough 🏃&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s work through the whole process of writing an ARM template which deploys multiple resources.&lt;/p&gt;
&lt;p&gt;Github Repository - &lt;a href=&#34;https://github.com/DexterPOSH/ArmTemplateLoopExample&#34;&gt;ArmTemplateLoopExample&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a simple post demonstrating looping logic I often use, feel free to sprinkle your own best practices &amp;amp; modifications on top e.g. storing templates in a private Cloud blob container, adding more parameters, names etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;scenario&#34;&gt;Scenario&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s take a scenario of deploying many storage accounts based on the user input.&lt;/p&gt;
&lt;p&gt;Ideally, if you&amp;rsquo;re in this situation you should write 2 templates and utilize ARM linked templates to deploy them because it becomes too cumbersome to maintain a single ARM template to deploy a resource and loop over user-input and deploy multiple iterations of that resource. Trust me this is coming from experience 😉&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s start by creating 2 templates, I am going to use GitHub repository here for storing those but you can use a Cloud blob store account as well.&lt;/p&gt;
&lt;p&gt;Below is how my project directory layout looks like.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-output&#34; data-lang=&#34;output&#34;&gt;.
├── azuredeploy.json
└── linkedTemplate
   └── storageaccount.json
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;author-linked-template&#34;&gt;Author linked template&lt;/h3&gt;
&lt;p&gt;First thing to do when you&amp;rsquo;re writing an ARM template is to make sure you understand that component properly, how it works, best practices while using that Azure component etc. Why? you might be wondering because ARM templates is how you deploy your Azure cloud infrastructure and it would be as good as you make your ARM templates, they&amp;rsquo;re called blueprints for your Azure resources for this reason.&lt;/p&gt;
&lt;p&gt;But at the same time start small and head over to &lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates&#34;&gt;azure-quickstart-templates&lt;/a&gt; repository to get some samples.&lt;/p&gt;
&lt;p&gt;I found out that the template stored here in this &lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates/blob/master/101-storage-account-create/azuredeploy.json&#34;&gt;101-storage-account-create&lt;/a&gt; example is good enough for me. So, let me copypasta ✍ this and place the content inside my &lt;code&gt;linkedtemplate\storageaccount.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;So, we have a starting point which can deploy a single storage account for us, but you would notice on closer inspection that this &lt;code&gt;storageaccount.json&lt;/code&gt; template doesn&amp;rsquo;t take storageAccountName as a parameter but generates it in the variables section.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s quickly modify it. Changes made:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add parameter &lt;code&gt;storageAccountName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;remove variable &lt;code&gt;storageAccountName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;change &lt;code&gt;[variables(&#39;storageAccountName&#39;)]&lt;/code&gt; references to &lt;code&gt;[parameters(&#39;storageAccountName&#39;)]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;added&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;storageAccountName&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;parameter&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
     },
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_ZRS&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Premium_LRS&amp;#34;&lt;/span&gt;
       ],
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Storage Account type&amp;#34;&lt;/span&gt;
       }
     },
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location for all resources.&amp;#34;&lt;/span&gt;
       }
     }
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;: {
     &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;removed&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;storageAccountName&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;here&lt;/span&gt;
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;: [
     {
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-04-01&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountName&amp;#39;)]&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;location&amp;#39;)]&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;sku&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountType&amp;#39;)]&amp;#34;&lt;/span&gt;
       },
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StorageV2&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {}
     }
   ],
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;outputs&amp;#34;&lt;/span&gt;: {
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: {
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountName&amp;#39;)]&amp;#34;&lt;/span&gt;
     }
   }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;author-the-stitching-logic&#34;&gt;Author the stitching logic&lt;/h3&gt;
&lt;p&gt;Moving on to the logic of consolidating user input and then looping over and deploying a storage account multiple times.&lt;/p&gt;
&lt;p&gt;The gist is that we have to do below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use variable iteration to create an array of objects based on our &lt;code&gt;numberofStorageAccounts&lt;/code&gt; parameter value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use resource iteration later with a linked template deployment and index into the array created above for parameter values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t worry if this is a bit daunting. It was for me the first time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;adding-barebone-template&#34;&gt;Adding barebone template&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s start by creating a blank ARM template. Open the &lt;code&gt;azuredeploy.json&lt;/code&gt; in VSCode. Key in &lt;code&gt;arm&lt;/code&gt; and it would give you a snippet dropdown, select the first one for targeting a Resource group deployment.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/006/arm_snippets.png&#34; alt=&#34;alt&#34;&gt;&lt;/p&gt;
&lt;p&gt;So, we get this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {},
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;functions&amp;#34;&lt;/span&gt;: [],
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;: {},
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;: [],
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;outputs&amp;#34;&lt;/span&gt;: {}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;add-parameters&#34;&gt;Add parameters&lt;/h5&gt;
&lt;p&gt;Time to add in some parameters to our &lt;code&gt;azuredeploy.json&lt;/code&gt; which is end-user facing. So you need to take input in this one from the user (which could be yourself as well) and then pass those over to the linkedtemplate.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;storageAccountNamePrefix - prefix for the storage accounts to be deployed. Length 5-10.&lt;/li&gt;
&lt;li&gt;numberofStorageAccounts - integer representing how many storage accounts to deploy. [Default - 1, Min 1, Max 10.&lt;/li&gt;
&lt;li&gt;storageAccountType - Type of the storage accounts, predefined allowed values. Default - Standard_GRS.&lt;/li&gt;
&lt;li&gt;location - location for the storage accounts. Default is RG location.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is how the &lt;code&gt;parameters&lt;/code&gt; object looks now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;minLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;maxLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;minValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;maxValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_ZRS&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Premium_LRS&amp;#34;&lt;/span&gt;
    ]
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location for all resources.&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;add-the-variables-iteration-logic&#34;&gt;Add the variables (iteration logic)&lt;/h5&gt;
&lt;p&gt;I typically like to use variables a lot for transforming the input parameters and then using these variables later in the resources because it makes it easier in future to just modify these variables at once place.&lt;/p&gt;
&lt;p&gt;Use the concept of &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/copy-variables&#34;&gt;variable iteration&lt;/a&gt; in ARM templates.&lt;/p&gt;
&lt;p&gt;We use the above concept to do the below&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a variable named &lt;code&gt;_deployMultipleStorageAccounts&lt;/code&gt; (sort of a convention I follow to name these variables used later in deployment to preceed with &lt;code&gt;_deploy&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Use the parameter &lt;code&gt;numberofStorageAccounts&lt;/code&gt; to loop over that many times&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;input&lt;/code&gt; property in the copy loop object to generate an object containing properties which will be mapped one to one with the linked template storage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I prefer one to one mapping between the properties inside the &lt;code&gt;input&lt;/code&gt; in the copy loop to the parameters of the linked template. It makes it easier to index into them and specify them (you&amp;rsquo;ll see later).&lt;/p&gt;
&lt;p&gt;Below is a gist of what I added in the variables property.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;: [
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_deployMultipleStorageAccounts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;used&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;later&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;resources&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;numberofStorageAccounts&amp;#39;)]&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;loop&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;numberofStorageAccounts&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;time&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;: { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;con&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountType&amp;#39;)]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;location&amp;#39;)]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          concat(
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            parameters(&amp;#39;storageAccountNamePrefix&amp;#39;),
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            uniqueString(resourceGroup().id),
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            copyIndex(&amp;#39;_deployMultipleStorageAccounts&amp;#39;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        ]&amp;#34;&lt;/span&gt;
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the outputs section we added a &lt;code&gt;variables&lt;/code&gt; property which essentially displays the value for the variable &lt;code&gt;_deployMultipleStorageAccounts&lt;/code&gt;. This can be used later with a trick to see what values go inside this variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outputs&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_deployMultipleStorageAccounts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[variables(&amp;#39;_deployMultipleStorageAccounts&amp;#39;)]&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, I added a &lt;code&gt;variables&lt;/code&gt; property in the output which is used to display what goes inside this variable once it is run by ARM API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/006/transformParams.png&#34; alt=&#34;alt&#34;&gt;&lt;/p&gt;
&lt;p&gt;From a data-view point above creates a variable named &lt;code&gt;_deployMultipleStorageAccounts&lt;/code&gt; which is an array of Json objects.&lt;/p&gt;
&lt;p&gt;If we assume the &lt;code&gt;parameters(&#39;numberofStorageAccounts&#39;)&lt;/code&gt; is 2, &lt;code&gt;parameters(&#39;storageAccountType&#39;)&lt;/code&gt; is &lt;em&gt;Standard_GRS&lt;/em&gt; and &lt;code&gt;parameters(&#39;location&#39;)&lt;/code&gt; is &lt;em&gt;SouthEastAsia&lt;/em&gt;, then it creates an array like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;generatedValuebyARM&amp;gt;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;loation&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SouthEastAsia&amp;#34;&lt;/span&gt;,
  },
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;generatedValuebyARM&amp;gt;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SouthEastAsia&amp;#34;&lt;/span&gt;,
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;add-the-deployment-resource&#34;&gt;Add the deployment resource&lt;/h4&gt;
&lt;p&gt;Now, you already know we have the linked template to deploy a single storage account. So, we just need to invoke/call that template multiple times and pass in paramters.&lt;/p&gt;
&lt;p&gt;This is done by an ARM template technique called as ARM template linked templates. Read about it more &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/linked-templates#linked-template&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Follow a &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deployment-tutorial-linked-template?tabs=azure-powershell#create-a-linked-template&#34;&gt;Tutorial&lt;/a&gt; to deploy a linked template, if this is the firs time you&amp;rsquo;re hearing about this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In short, within our &lt;code&gt;azuredeploy.json&lt;/code&gt; template we need to use a resource of type &lt;code&gt;Microsoft.Resources/deployments&lt;/code&gt; to link to our &lt;code&gt;storageaccount.json&lt;/code&gt; template and inside this resource we need to use another concept termed as &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/copy-resources&#34;&gt;&lt;em&gt;Resource iteration&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s add it.&lt;/p&gt;
&lt;p&gt;This is how my resources array property looks like.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Microsoft.Resources/deployments&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-10-01&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;condition&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[concat(&amp;#39;deploy-linkedStorageTemplate&amp;#39;, copyIndex())]&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;numberofStorageAccounts&amp;#39;)]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_loopToDeployStorageAccounts&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parallel&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Incremental&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;templateLink&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;uri&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://raw.githubusercontent.com/DexterPOSH/ArmTemplateLoopExample/master/linkedtemplate/storageaccount.json&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[variables(&amp;#39;_deployMultipleStorageAccounts&amp;#39;)[copyIndex()].storageAccountName]&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[variables(&amp;#39;_deployMultipleStorageAccounts&amp;#39;)[copyIndex()].storageAccountType]&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[variables(&amp;#39;_deployMultipleStorageAccounts&amp;#39;)[copyIndex()].location]&amp;#34;&lt;/span&gt;
        }
      }
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I know it&amp;rsquo;s a handful but below is a breakdown of major things it does.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uses &lt;code&gt;Microsoft.Resources/deployments&lt;/code&gt; resource type to deploy another template.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note we generate a unique name for the deployment by concating the &lt;code&gt;copyIndex()&lt;/code&gt;
The &lt;code&gt;condition&lt;/code&gt; property is set to &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Microsoft.Resources/deployments&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-10-01&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;condition&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[concat(&amp;#39;deploy-linkedStorageTemplate&amp;#39;, copyIndex())]&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&amp;lt;--&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;skipped&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;below&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;properties&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;--&amp;gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Uses the &lt;code&gt;uri&lt;/code&gt; of the raw template link for the &lt;code&gt;storageaccount.json&lt;/code&gt; in the GitHub repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;templateLink&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;uri&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://raw.githubusercontent.com/DexterPOSH/ArmTemplateLoopExample/master/linkedtemplate/storageaccount.json&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Uses resource iteration by using &lt;code&gt;copy&lt;/code&gt; property and using the &lt;code&gt;parameters(&#39;numberofStorageAccounts&#39;)&lt;/code&gt; as the value for count, which means it loops over this resource this many times. Also, gives this copy loop a friendly name &lt;code&gt;_loopToDeployStorageAccounts&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;numberofStorageAccounts&amp;#39;)]&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_loopToDeployStorageAccounts&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Passes on the parameters to this linked template by indexing into the variable &lt;code&gt;_deployMultipleStorageAccounts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[variables(&amp;#39;_deployMultipleStorageAccounts&amp;#39;)[copyIndex()].storageAccountName]&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;dry-run---verify-variable-iteration-logic&#34;&gt;Dry run - Verify Variable iteration logic&lt;/h4&gt;
&lt;p&gt;Based on my experience with this approach of looping over, we can most of the time validate what is inside the variable created for looping to verify it will work.&lt;/p&gt;
&lt;p&gt;Remember the &lt;code&gt;condition&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; for our linked template deployment resource, which means when we submit this ARM template for deployment it won&amp;rsquo;t trigger it but however the &lt;code&gt;azuredeploy.json&lt;/code&gt; will be processed and we will get the output back which contains the &lt;code&gt;variables&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create an ARM template parameters file, with the new release of the ARM tools VSCode extension, it is natively possible to generate these parameters file. Read more in the release notes &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=msazurermtools.azurerm-vscode-tools&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Click on &lt;em&gt;Select Parameter File&amp;hellip;&lt;/em&gt; (at the bottom) &amp;gt; &lt;em&gt;New&lt;/em&gt; &amp;gt; &lt;em&gt;All parameters&lt;/em&gt; &amp;gt; Save it. Open it and fill the values.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/006/generateParam.png&#34; alt=&#34;Generate ARM parameters file&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is how it looks after adding values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurearm6754&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;southindia&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Deploy it using Az PowerShell module cmdelt&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$rg =  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_arm_rg&amp;#34;&lt;/span&gt;
New-AzResourceGroupDeployment -TemplateFile ./azuredeploy.json -TemplateParameterFile ./azuredeploy.parameters.json -ResourceGroupName $rg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-output&#34; data-lang=&#34;output&#34;&gt;DeploymentName          : azuredeploy
ResourceGroupName       : test_arm_rg
ProvisioningState       : Succeeded
Timestamp               : 06/07/2020 14:24:21
Mode                    : Incremental
TemplateLink            :
Parameters              :
                          Name                        Type                       Value
                          ==========================  =========================  ==========
                          storageAccountNamePrefix    String                     azurearm6754
                          numberofStorageAccounts     Int                        2
                          storageAccountType          String                     Standard_GRS
                          location                    String                     southindia

Outputs                 :
                          Name             Type                       Value
                          ===============  =========================  ==========
                          variables        Object                     {
                            &amp;quot;_deployMultipleStorageAccounts&amp;quot;: [
                              {
                                &amp;quot;storageAccountType&amp;quot;: &amp;quot;Standard_GRS&amp;quot;,
                                &amp;quot;location&amp;quot;: &amp;quot;southindia&amp;quot;,
                                &amp;quot;storageAccountName&amp;quot;: &amp;quot;azurearm67543ub5zsu77klvq0&amp;quot;
                              },
                              {
                                &amp;quot;storageAccountType&amp;quot;: &amp;quot;Standard_GRS&amp;quot;,
                                &amp;quot;location&amp;quot;: &amp;quot;southindia&amp;quot;,
                                &amp;quot;storageAccountName&amp;quot;: &amp;quot;azurearm67543ub5zsu77klvq1&amp;quot;
                              }
                            ]
                          }

DeploymentDebugLogLevel :
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Look at the outputs section, it clearly lists out the variable we generated and upon which our whole logic of depolying multiple resources existed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_deployMultipleStorageAccounts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;southindia&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurearm67543ub5zsu77klvq0&amp;#34;&lt;/span&gt;
  },
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;southindia&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurearm67543ub5zsu77klvq1&amp;#34;&lt;/span&gt;
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;test-the-solution&#34;&gt;Test the solution&lt;/h3&gt;
&lt;p&gt;Once the variable iteration logic is verified, it is time to deploy the tempalte to see that it actually creates.&lt;/p&gt;
&lt;p&gt;Wait! before you jump into testing it you need to make a minor change. Can you guess what? Set &lt;code&gt;condition&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; inside the linked template deployment resource.&lt;/p&gt;
&lt;p&gt;Below is a snippet of where that change goes inside the template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Microsoft.Resources/deployments&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-10-01&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;condition&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;actually&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;deploy&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;linked&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;template&lt;/span&gt;,
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&amp;lt;--&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;skipped&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;below&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;properties&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;--&amp;gt;&lt;/span&gt;
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Deploy again, this time it should deploy multiple storage accounts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$rg =  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_arm_rg&amp;#34;&lt;/span&gt;
New-AzResourceGroupDeployment -TemplateFile ./azuredeploy.json -TemplateParameterFile ./azuredeploy.parameters.json -ResourceGroupName $rg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tldr-solution-&#34;&gt;TLDR; Solution 🗞&lt;/h2&gt;
&lt;p&gt;Head over to this GitHub repository to see the ARM templates.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/DexterPOSH/ArmTemplateLoopExample&#34;&gt;ArmTemplateLoopExample&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;references-&#34;&gt;References 📚&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=msazurermtools.azurerm-vscode-tools&#34;&gt;Azure Resource Manager (ARM) Tools VSCode extension&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates&#34;&gt;Azure QuickStart Templates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/linked-templates#linked-template&#34;&gt;Linked Templates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deployment-tutorial-linked-template?tabs=azure-powershell#create-a-linked-template&#34;&gt;Deploy a linked template tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/copy-resources&#34;&gt;Resource-Ieration&lt;/a&gt;&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>AKS PowerShell Tip - Add Authorized Ip</title>
      <link>https://dexterposh.github.io/posts/005-aks-tip-ip/</link>
      <pubDate>Fri, 01 May 2020 12:21:28 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/005-aks-tip-ip/</guid>
      <description>&lt;h2 id=&#34;background-&#34;&gt;Background 🐼&lt;/h2&gt;
&lt;p&gt;Recently, I found out that there is no sane way to perform adding a public IP address to
the authorized IP address ranges using either the
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/aks/api-server-authorized-ip-ranges#update-a-clusters-api-server-authorized-ip-ranges&#34;&gt;Az CLI&lt;/a&gt;
or &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/az.aks/?view=azps-3.8.0&#34;&gt;Az.Aks&lt;/a&gt; PowerShell (no cmdlets available yet) module.&lt;/p&gt;
&lt;p&gt;From the official docs it says to use  something like below format with Az CLI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;az aks update &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --resource-group myResourceGroup &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --name myAKSCluster &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --api-server-authorized-ip-ranges 73.140.245.0/24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But it doesn&amp;rsquo;t tell you how to append the IP to the range, instead you need to
supply a comma separated value of public IP addresses.&lt;/p&gt;
&lt;h2 id=&#34;challenge-&#34;&gt;Challenge ☁️&lt;/h2&gt;
&lt;p&gt;Well, this is can be done by using Az CLI with PowerShell or Bash and parsing
output then generating a comma separated string and passing it back to Az CLI
😞&lt;/p&gt;
&lt;h2 id=&#34;solution-&#34;&gt;Solution ⚡&lt;/h2&gt;
&lt;p&gt;Often, when I am hit with such limitations with cmdlets or Az CLI making life
hard. I go back to using simply the 2 cmdlets provided by &lt;em&gt;Az.Resources&lt;/em&gt; module.&lt;/p&gt;
&lt;p&gt;Behold mighty!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Get-AzResource&lt;/em&gt; - Gets the Az resource&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Set-AzResource&lt;/em&gt; - Modifies the Az resource&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I ended up doing the below and creating a utility function out of it.&lt;/p&gt;
&lt;p&gt;First, get the AKS Cluster resource. Make sure to specify the &lt;strong&gt;-ExpandProperties&lt;/strong&gt;
switch to get back full fledged resource otherwise it returns a shallow instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ResourceGroup = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test-aks-rg&amp;#34;&lt;/span&gt;
$Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aksCluster001&amp;#34;&lt;/span&gt;
$IP = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;110.91.234.43&amp;#34;&lt;/span&gt;
$AksCluster = Get-AzResource -ResourceGroupName $ResourceGroup -Name $Name -ExpandProperties -ErrorAction Stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you have the resource, walk-through the properties and append the IP (+=
operator in PowerShell) to the local copy of the resource.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$orgClusterInfo.Properties.apiServerAccessProfile.authorizedIpRanges += $Ip

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, perform a Set operation by piping the modified local resource copy to
&lt;strong&gt;Set-AzResource&lt;/strong&gt; cmdlet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$orgClusterInfo | Set-AzResource -ErrorAction Stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;takeaway-&#34;&gt;Takeaway 🔥&lt;/h2&gt;
&lt;p&gt;Even, when there are certain utility functions not available in the Az PowerShell
module. We can rely on the &lt;em&gt;`&lt;/em&gt;-Resource* cmdlets to work our way through.&lt;/p&gt;
</description> 
    </item>
    
  </channel>
</rss>

