<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tip on Engineer taking Dev?Ops notes</title>
    <link>https://dexterposh.github.io/tags/tip/</link>
    <description>Recent content in tip on Engineer taking Dev?Ops notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Jun 2020 19:42:59 +0530</lastBuildDate>
    
	<atom:link href="https://dexterposh.github.io/tags/tip/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PowerShell Classes - Validating ARM parameters</title>
      <link>https://dexterposh.github.io/posts/007-pwsh-class-usecase/</link>
      <pubDate>Mon, 29 Jun 2020 19:42:59 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/007-pwsh-class-usecase/</guid>
      <description>&lt;h2 id=&#34;origin&#34;&gt;Origin‚ùì&lt;/h2&gt;
&lt;p&gt;(shameless plug, alert!) üôÉ&lt;/p&gt;
&lt;p&gt;Recently, I was discussing with my colleague about this new &lt;a href=&#34;https://leanpub.com/powershell-to-csharp&#34;&gt;book&lt;/a&gt; I am co-authoring (with &lt;a href=&#34;https://twitter.com/singhprateik&#34;&gt;Prateek&lt;/a&gt;) about why to learn .NET to be a better PowerShell programmer and upon further discussion we pondered some interesting ways to use PowerShell classes.&lt;/p&gt;
&lt;h2 id=&#34;brain-storming-&#34;&gt;Brain-storming ü§î&lt;/h2&gt;
&lt;p&gt;All was lost, until we had another quick conversation about how to validate ARM templates.
Well, I suggested to write Pester tests to check the input being passed and perform &lt;code&gt;Test-AzDeployment&lt;/code&gt; for ARM templates.&lt;/p&gt;
&lt;p&gt;Another idea that popped up in my mind was what if we write a PowerShell class to model the ARM parameters file and use that to validate the ARM template parameter inputs.&lt;/p&gt;
&lt;h2 id=&#34;solution-&#34;&gt;Solution üöÄ&lt;/h2&gt;
&lt;p&gt;There exists the &lt;a href=&#34;https://github.com/dfinke/ConvertToClass&#34;&gt;ConvertToClass&lt;/a&gt; module by Doug Finke, which comes to the rescue to automatically convert a JSON object to a PowerShell class. It even has VSCode integration, check it out.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start by taking a sample &lt;code&gt;azuredeploy.parameters.json&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Azurearm6754&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westus2&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;convert-json-to-class-&#34;&gt;Convert Json to Class ‚òØ&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s run the &lt;code&gt;ConverTo-Class&lt;/code&gt; function in the ConvertToClass module against this &lt;code&gt;azuredeploy.parameters.json&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;ConvertTo-Class -Target (Get-Content ./azuredeploy.parameters.json -Raw)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/007/class1.png&#34; alt=&#34;alt&#34;&gt;&lt;/p&gt;
&lt;p&gt;Above command generates below content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;class RootObject1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$$schema
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$contentVersion
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[parameters]&lt;/span&gt;$parameters
}

class parameters1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[storageAccountNamePrefix]&lt;/span&gt;$storageAccountNamePrefix
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[numberofStorageAccounts]&lt;/span&gt;$numberofStorageAccounts
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[storageAccountType]&lt;/span&gt;$storageAccountType
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[location]&lt;/span&gt;$location
}

class storageAccountNamePrefix1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class numberofStorageAccounts1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[int]&lt;/span&gt;$value
}

class storageAccountType1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class location1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s rename the above classes like below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$$schema&lt;/code&gt; property on &lt;code&gt;RootObject1&lt;/code&gt; to &lt;code&gt;${$schema}&lt;/code&gt;, done to escape &lt;code&gt;$&lt;/code&gt; char in property name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RootObject1&lt;/code&gt; to &lt;code&gt;AzureParameters&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parameters1&lt;/code&gt; to &lt;code&gt;Parameters&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storageAccountNamePrefix1&lt;/code&gt; to &lt;code&gt;StorageAccountType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numberofStorageAccounts1&lt;/code&gt; to &lt;code&gt;StorageAccountType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storageAccountType1&lt;/code&gt; to &lt;code&gt;StorageAccountType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location1&lt;/code&gt; to &lt;code&gt;Location&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;add-validation-attributes-&#34;&gt;Add validation attributes üî®&lt;/h3&gt;
&lt;p&gt;We can add validation attributes to the property &lt;code&gt;$value&lt;/code&gt; present inside the auto-generated class to add some quick validation rules to the properties present on the class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note the name &lt;code&gt;$value&lt;/code&gt; is given to the property because this is how ARM parameters file take input.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;class AzureParameters {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;${$schema}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$contentVersion
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[Parameters]&lt;/span&gt;$parameters
}

class Parameters {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[StorageAccountNamePrefix]&lt;/span&gt;$storageAccountNamePrefix
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[NumberofStorageAccounts]&lt;/span&gt;$numberofStorageAccounts
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[StorageAccountType]&lt;/span&gt;$storageAccountType
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[Location]&lt;/span&gt;$location
}

class StorageAccountNamePrefix {
    &lt;span style=&#34;color:#75715e&#34;&gt;# validate the prefix length&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateLength&lt;/span&gt;(3,15)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class StorageAccountNamePrefix {
    &lt;span style=&#34;color:#75715e&#34;&gt;# restricting the min=1 and max=10 storage accounts that one can request&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateRange&lt;/span&gt;(1,10)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[int]&lt;/span&gt;$value
}

class StorageAccountType {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Restricting the StorageAccount SKUs&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateSet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_LRS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_GRS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_ZRS&amp;#39;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class Location {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Restricting the locations&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateSet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;westus2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;northcentralus&amp;#39;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;add-logic-inside-empty-constructor-&#34;&gt;Add logic inside Empty Constructor ‚åõ&lt;/h3&gt;
&lt;p&gt;We can add one more trick to the bag to add an empty constructor explicitly (this is present when no constructor exists) and put some more validation logic if the current validate attributes doesn&#39; suit the needs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;class AzureParameters {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;${$schema}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$contentVersion
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[Parameters]&lt;/span&gt;$parameters
}

class Parameters {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[StorageAccountNamePrefix]&lt;/span&gt;$storageAccountNamePrefix
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[NumberofStorageAccounts]&lt;/span&gt;$numberofStorageAccounts
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[StorageAccountType]&lt;/span&gt;$storageAccountType
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[Location]&lt;/span&gt;$location
}

class StorageAccountNamePrefix {
    &lt;span style=&#34;color:#75715e&#34;&gt;# validate the prefix length&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateLength&lt;/span&gt;(3,15)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class NumberofStorageAccounts {
    &lt;span style=&#34;color:#75715e&#34;&gt;# restricting the min=1 and max=10 storage accounts that one can request&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateRange&lt;/span&gt;(1,10)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[int]&lt;/span&gt;$value
}

class StorageAccountType {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Restricting the StorageAccount SKUs&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateSet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_LRS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_GRS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_ZRS&amp;#39;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value

    &lt;span style=&#34;color:#75715e&#34;&gt;# Add some more validation logic inside the empty constructor&lt;/span&gt;
    storageAccountType() {
        &lt;span style=&#34;color:#75715e&#34;&gt;# Perform some validation on the property&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($this.value &lt;span style=&#34;color:#f92672&#34;&gt;-ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_ZRS&amp;#39;&lt;/span&gt;) {
            &lt;span style=&#34;color:#75715e&#34;&gt;# you can perform more checks or logging, throwing a warning here&lt;/span&gt;
            Write-Warning -Message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No zone redundancy&amp;#34;&lt;/span&gt;
        }
    }
}

class Location {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Restricting the locations&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateSet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;westus2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;northcentralus&amp;#39;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Why does this has to be an empty constructor?
The answer is that we will be a using a trick with how we create an instance of the class in next section&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;secret-sauce--cast-initialization-&#34;&gt;Secret-Sauce : Cast-Initialization üç≤&lt;/h3&gt;
&lt;p&gt;Credit goes to Bruce Payette&amp;rsquo;s &lt;a href=&#34;https://livebook.manning.com/book/windows-powershell-in-action-third-edition/chapter-19/311&#34;&gt;Windows PowerShell in Action 3rd&lt;/a&gt; edition which talks a bit about this technique in brief.&lt;/p&gt;
&lt;p&gt;In short, you can take a hashtable or PSObjects and cast them as strongly type object instance. This will become more clear when we perform this casting a bit later.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For cast-initalization technique to work an empty constructor needs to be present in the Class definition. It is present by default if there is no constructor on the class present or you can add one explicitly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Modify some value in the &lt;code&gt;azuredeploy.parameters.json&lt;/code&gt; file to not-follow some validation logic we added e.g. putting the value for &lt;code&gt;numberofStorageAccount&lt;/code&gt; as &lt;code&gt;20&lt;/code&gt;, remember our &lt;code&gt;[ValidateRange(1,10)]&lt;/code&gt; attribute on the property should fails. See the parameters file below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurearm6754&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westus2&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, see the result when casting this as our &lt;code&gt;ArmParameters&lt;/code&gt; class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[azureparameters]&lt;/span&gt; (Get-Content -Path $PSScriptRoot/azuredeploy.parameters.json | ConvertFrom-Json)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/007/validation.png&#34; alt=&#34;Validation in Action&#34;&gt;&lt;/p&gt;
&lt;p&gt;Throws below error:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-error&#34; data-lang=&#34;error&#34;&gt;InvalidArgument: Cannot convert value &amp;quot;@{$schema=https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#; contentVersion=1.0.0.0; parameters=}&amp;quot; to type &amp;quot;AzureParameters&amp;quot;. Error: &amp;quot;Cannot convert value &amp;quot;@{storageAccountNamePrefix=; numberofStorageAccounts=; storageAccountType=; location=}&amp;quot; to type &amp;quot;Parameters&amp;quot;. Error: &amp;quot;Cannot create object of type &amp;quot;NumberofStorageAccounts&amp;quot;. The 20 argument is greater than the maximum allowed range of 10. Supply an argument that is less than or equal to 10 and then try the command again.&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Fix the value for the &lt;code&gt;numberofStorageAccounts&lt;/code&gt; parameter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurearm6754&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westus2&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the below again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[azureparameters]&lt;/span&gt; (Get-Content -Path $PSScriptRoot/azuredeploy.parameters.json | ConvertFrom-Json)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/007/valid.png&#34; alt=&#34;Validation passes&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion-&#34;&gt;Conclusion ‚úÖ&lt;/h2&gt;
&lt;p&gt;This is maybe a very basic way of validating input data but I read about a topic and used it to solve a problem in a unique way, which is a win for me üòé.&lt;/p&gt;
&lt;p&gt;I think slowly embracing more Object-Oriented programming using PowerShell classes (or C#) can open up some interesting ways to solve problems in my tooling.&lt;/p&gt;
&lt;h2 id=&#34;resource-links-&#34;&gt;Resource links üìö&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/powershell-to-csharp&#34;&gt;PowerShell to C# and back&lt;/a&gt; - Disclaimer: co-author on this one.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ridicurious.com/2020/06/29/powershell-to-csharp-and-back-classes/&#34;&gt;PowerShell to C# and Back ‚Äì Introduction to Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://livebook.manning.com/book/windows-powershell-in-action-third-edition&#34;&gt;Windows PowerShell in Action, 3rd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dfinke/ConvertToClass&#34;&gt;Doug Finke&amp;rsquo;s ConvertToClass module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Stephanevg/PSClassUtils&#34;&gt;PSClassUtils&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description> 
    </item>
    
    <item>
      <title>AKS PowerShell Tip - Add Authorized Ip</title>
      <link>https://dexterposh.github.io/posts/005-aks-tip-ip/</link>
      <pubDate>Fri, 01 May 2020 12:21:28 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/005-aks-tip-ip/</guid>
      <description>&lt;h2 id=&#34;background-&#34;&gt;Background üêº&lt;/h2&gt;
&lt;p&gt;Recently, I found out that there is no sane way to perform adding a public IP address to
the authorized IP address ranges using either the
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/aks/api-server-authorized-ip-ranges#update-a-clusters-api-server-authorized-ip-ranges&#34;&gt;Az CLI&lt;/a&gt;
or &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/az.aks/?view=azps-3.8.0&#34;&gt;Az.Aks&lt;/a&gt; PowerShell (no cmdlets available yet) module.&lt;/p&gt;
&lt;p&gt;From the official docs it says to use  something like below format with Az CLI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;az aks update &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --resource-group myResourceGroup &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --name myAKSCluster &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --api-server-authorized-ip-ranges 73.140.245.0/24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But it doesn&amp;rsquo;t tell you how to append the IP to the range, instead you need to
supply a comma separated value of public IP addresses.&lt;/p&gt;
&lt;h2 id=&#34;challenge-&#34;&gt;Challenge ‚òÅÔ∏è&lt;/h2&gt;
&lt;p&gt;Well, this is can be done by using Az CLI with PowerShell or Bash and parsing
output then generating a comma separated string and passing it back to Az CLI
üòû&lt;/p&gt;
&lt;h2 id=&#34;solution-&#34;&gt;Solution ‚ö°&lt;/h2&gt;
&lt;p&gt;Often, when I am hit with such limitations with cmdlets or Az CLI making life
hard. I go back to using simply the 2 cmdlets provided by &lt;em&gt;Az.Resources&lt;/em&gt; module.&lt;/p&gt;
&lt;p&gt;Behold mighty!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Get-AzResource&lt;/em&gt; - Gets the Az resource&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Set-AzResource&lt;/em&gt; - Modifies the Az resource&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I ended up doing the below and creating a utility function out of it.&lt;/p&gt;
&lt;p&gt;First, get the AKS Cluster resource. Make sure to specify the &lt;strong&gt;-ExpandProperties&lt;/strong&gt;
switch to get back full fledged resource otherwise it returns a shallow instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ResourceGroup = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test-aks-rg&amp;#34;&lt;/span&gt;
$Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aksCluster001&amp;#34;&lt;/span&gt;
$IP = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;110.91.234.43&amp;#34;&lt;/span&gt;
$AksCluster = Get-AzResource -ResourceGroupName $ResourceGroup -Name $Name -ExpandProperties -ErrorAction Stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you have the resource, walk-through the properties and append the IP (+=
operator in PowerShell) to the local copy of the resource.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$orgClusterInfo.Properties.apiServerAccessProfile.authorizedIpRanges += $Ip

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, perform a Set operation by piping the modified local resource copy to
&lt;strong&gt;Set-AzResource&lt;/strong&gt; cmdlet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$orgClusterInfo | Set-AzResource -ErrorAction Stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;takeaway-&#34;&gt;Takeaway üî•&lt;/h2&gt;
&lt;p&gt;Even, when there are certain utility functions not available in the Az PowerShell
module. We can rely on the &lt;em&gt;`&lt;/em&gt;-Resource* cmdlets to work our way through.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Azure DevOps Tip - Job re-use within a Stage</title>
      <link>https://dexterposh.github.io/posts/004-azdo-tip-job/</link>
      <pubDate>Sun, 26 Apr 2020 09:53:50 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/004-azdo-tip-job/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Azure DevOps introduced multi-stage yaml pipelines a while ago. It allows us
to define our entire Build/Release landscape inside these yaml definitions.&lt;/p&gt;
&lt;p&gt;To re-iterate of some terms used in this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A pipeline comprises one or more stages&lt;/li&gt;
&lt;li&gt;Stage is collection of jobs&lt;/li&gt;
&lt;li&gt;Job runs on an agent/ agentless&lt;/li&gt;
&lt;li&gt;Job contains steps (task/script)&lt;/li&gt;
&lt;li&gt;Steps are the atomic unit to perform a task&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;challenge&#34;&gt;Challenge&lt;/h2&gt;
&lt;p&gt;Recently, working our multi-stage yaml pipelines, we hit an interesting
behavior with our job template re-use.&lt;/p&gt;
&lt;p&gt;We had quite few common steps we require to take in each stage (multiple times)
to hit an external API. So, to re-use we extracted them out as a job
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops&#34;&gt;template&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;jobtemplateyml&#34;&gt;jobtemplate.yml&lt;/h3&gt;
&lt;p&gt;For this post, creating a sample job and taking an
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/delay?view=azure-devops&#34;&gt;agentless delay task&lt;/a&gt; as an example but this job template can include
series of steps.&lt;/p&gt;
&lt;p&gt;Below is my extracted out job template definition (indues a delay) which I want to re-use within stages in my main &lt;strong&gt;azure-pipelines.yml&lt;/strong&gt; pipeline definition later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;parameters&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;windows&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;job&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;commonJob&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Common Job&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;pool&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;server&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;task&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Delay@1&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Delay by 1 minutes for ${{ parameters.name }}&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;inputs&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;delayForMinutes&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;azure-pipelinesyml&#34;&gt;azure-pipelines.yml&lt;/h3&gt;
&lt;p&gt;Now, I want to call my Job template from above inside two stages Build &amp;amp; Deploy
in the multi-stage yaml pipeline as below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;stages&lt;/span&gt;:
- &lt;span style=&#34;color:#f92672&#34;&gt;stage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./jobtemplate.yml&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;job&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build1&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;stage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./jobtemplate.yml&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;job&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kick off a build for this and you would see it in the AzDO portal, that it works
out well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/004/jobWithinDiffStages.png&#34; alt=&#34;Same Job template used with diffn stages&#34;&gt;&lt;/p&gt;
&lt;p&gt;But, if I try to use the same Job template multiple times within the same stage
that is when things get interesting. Let&amp;rsquo;s modify our &lt;strong&gt;azure-pipelines.yml&lt;/strong&gt; definition now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;stages&lt;/span&gt;:
- &lt;span style=&#34;color:#f92672&#34;&gt;stage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./jobtemplate.yml&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;parameters&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deepak&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./jobtemplate.yml&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;parameters&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Dhami&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;job&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build1&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;stage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./jobtemplate.yml&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;job&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Try running this new modified pipeline and you would be greeted with the below
in the portal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/004/nameCollision.png&#34; alt=&#34;Job name not unique&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is quite obvious but the job names in a stage should be unique.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;To get to a solution we looked at generating a unique name for our jobs but
it turns out there is a very simple solution to this problem.&lt;/p&gt;
&lt;p&gt;One can remove the job identifier in the job template completely while
extracting out jobs to re-use.&lt;/p&gt;
&lt;p&gt;What this means is we had to modify our Job templates like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;parameters&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;windows&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;job&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# Identifier here is removed&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Common Job&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;pool&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;server&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;task&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Delay@1&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Delay by 1 minutes for ${{ parameters.name }}&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;inputs&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;delayForMinutes&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, it works.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/004/jobReuse.png&#34; alt=&#34;Job re-use within same stage&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As a general practice, when I start extracting out steps as independent job
templates I tend to not populate the Job identifier if it&amp;rsquo;s scope is to be
re-used multiple times in the same stage.&lt;/p&gt;
&lt;p&gt;But if there is a job which you want to ensure that it is allowed to run only
once, you could stick with populating the field.&lt;/p&gt;
&lt;p&gt;So, as every engineer building solution says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It depends on the use-case&lt;/p&gt;
&lt;/blockquote&gt;
</description> 
    </item>
    
    <item>
      <title>Azure DevOps Tip - Find private APIs</title>
      <link>https://dexterposh.github.io/posts/002-azdo-tip-api/</link>
      <pubDate>Tue, 14 Apr 2020 15:06:22 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/002-azdo-tip-api/</guid>
      <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Often working with Azure DevOps, I hit a wall trying to automate some tasks but
there are no REST APIs made public yet.&lt;/p&gt;
&lt;p&gt;It was one of those task of automating creation of Environments in multi-stage
YAML based pipelines in AzDO.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/env.png&#34; alt=&#34;Azure DevOps environments&#34;&gt;&lt;/p&gt;
&lt;p&gt;Quick research reveals that this has been requested in &lt;a href=&#34;https://developercommunity.visualstudio.com/content/problem/820737/rest-apis-for-environments-and-its-resources-multi.html&#34;&gt;uservoice&lt;/a&gt; (please upvote).
Let&amp;rsquo;s see one of the very simple ways to discover some of these APIs.&lt;/p&gt;
&lt;h2 id=&#34;developers-tools-to-rescue&#34;&gt;Developers Tools to rescue&lt;/h2&gt;
&lt;p&gt;Using your browser&amp;rsquo;s developers tools you can actually inspect the HTTP requests
being made while performing an action in the web portal.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/devnetwork.png&#34; alt=&#34;Developer tools&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s click on the &amp;ldquo;Create Environment&amp;rdquo; button, fill out some dummy values,
hit create and keep an eye on the network tab in the developer tools.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/envcreatenetwork.png&#34; alt=&#34;Create env watch network&#34;&gt;&lt;/p&gt;
&lt;p&gt;We see some activity, it might take you some time to walk through what happened but in this case the top activity named &amp;ldquo;environments&amp;rdquo; has the required details.&lt;/p&gt;
&lt;p&gt;See below and note the URL &amp;amp; method used:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/analyzerequest.png&#34; alt=&#34;Analyze request sent&#34;&gt;&lt;/p&gt;
&lt;p&gt;Also, make note of the Json request in the payload.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/requestpayload.png&#34; alt=&#34;Request payload&#34;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s mostly it, fire up postman/PowerShell to make the API call to test this.&lt;/p&gt;
&lt;h2 id=&#34;invoke-restmethod-in-pwsh&#34;&gt;Invoke-RestMethod in Pwsh&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&amp;amp;tabs=preview-page&#34;&gt;Generate a Personal Access Token&lt;/a&gt; in AzDO, typically start with a short lived PAT token with full access and then nail down on the specific permissions you need.&lt;/p&gt;
&lt;p&gt;Below is the code snippet, I used with AzDO to hit the REST API endpoint:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$url = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://dev.azure.com/ddhami/BITPro.AzDeploy/_apis/distributedtask/environments&amp;#39;&lt;/span&gt;
$cred = Get-Credential -UserName &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vsts&amp;#39;&lt;/span&gt; -Message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Enter AzDO Personal Access Token with privs to create env&amp;#39;&lt;/span&gt;
$encodedValue = &lt;span style=&#34;color:#66d9ef&#34;&gt;[Convert]&lt;/span&gt;::ToBase64String(
            &lt;span style=&#34;color:#66d9ef&#34;&gt;[Text.Encoding]&lt;/span&gt;::ASCII.GetBytes(
                (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}:{1}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, $cred.GetNetworkCredential().Password)
            )
        )

$body = @{
  name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test-pwsh-env&amp;#39;&lt;/span&gt;;
  description = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test environment from APR&amp;#39;&lt;/span&gt;
} | ConvertTo-Json
$headers = @{
  Accept = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json;&amp;#39;&lt;/span&gt;;
  Authorization = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Basic {0}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt; $encodedValue
}

Invoke-RestMethod -Method POST -Uri $url -Body $body -Headers $headers -ContentType &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But when I execute the above code, it gives me an error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/pwsherror.png&#34; alt=&#34;Error thrown&#34;&gt;&lt;/p&gt;
&lt;p&gt;The error thrown is below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;innerException&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No api-version was supplied for the \&amp;#34;POST\&amp;#34; request. The version must be supplied either as part of the Accept header (e.g. \&amp;#34;application/json; api-version=1.0\&amp;#34;) or as a query parameter (e.g. \&amp;#34;?api-version=1.0\&amp;#34;).&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;typeName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Microsoft.VisualStudio.Services.WebApi.VssVersionNotSpecifiedException, Microsoft.VisualStudio.Services.WebApi&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;typeKey&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;VssVersionNotSpecifiedException&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;errorCode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;eventId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Read the error message, it explains that the api-version is missing. Also, looking back at the capture and see where the api-version was specified.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/apiversion.png&#34; alt=&#34;API Version in header&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make the same change in our code snippet to include API version in the
header.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$url = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://dev.azure.com/ddhami/BITPro.AzDeploy/_apis/distributedtask/environments&amp;#39;&lt;/span&gt;
$cred = Get-Credential -UserName &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vsts&amp;#39;&lt;/span&gt; -Message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Enter AzDO Personal Access Token with privs to create env&amp;#39;&lt;/span&gt;
$encodedValue = &lt;span style=&#34;color:#66d9ef&#34;&gt;[Convert]&lt;/span&gt;::ToBase64String(
            &lt;span style=&#34;color:#66d9ef&#34;&gt;[Text.Encoding]&lt;/span&gt;::ASCII.GetBytes(
                (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}:{1}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, $cred.GetNetworkCredential().Password)
            )
        )

$body = @{
  name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test-pwsh-env&amp;#39;&lt;/span&gt;;
  description = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test environment from APR&amp;#39;&lt;/span&gt;
} | ConvertTo-Json
$headers = @{
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;  Accept = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json;api-version=5.0-preview.1&amp;#39;&lt;/span&gt;;
&lt;/span&gt;  Authorization = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Basic {0}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt; $encodedValue
}

Invoke-RestMethod -Method POST -Uri $url -Body $body -Headers $headers -ContentType = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here I go, this finally works and using the similar API endpoint I can fetch the environments as well (GET request).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/envsuccess.png&#34; alt=&#34;Env created success&#34;&gt;&lt;/p&gt;
</description> 
    </item>
    
  </channel>
</rss>

