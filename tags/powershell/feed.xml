<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>powershell on System Engineer taking Dev?Ops notes</title>
    <link>https://dexterposh.github.io/tags/powershell/</link>
    <description>Recent content in powershell on System Engineer taking Dev?Ops notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 May 2021 10:47:38 +0530</lastBuildDate><atom:link href="https://dexterposh.github.io/tags/powershell/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Azure Vms Resource Graph Queries</title>
      <link>https://dexterposh.github.io/posts/013-az-vms-resource-graph/</link>
      <pubDate>Mon, 24 May 2021 10:47:38 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/013-az-vms-resource-graph/</guid>
      <description>Why use Resource Graph instead Az CLI/ PowerShell? If we want to search for resources meeting certain criteria across all our subscriptions, we can&amp;rsquo;t use Az CLI or Az PowerShell to do this type of queries since it would require a lot of overhead to filter and switch between subscription contexts.</description>
    </item>
    
    <item>
      <title>PowerShell to C# &amp; back - JSON Create, Beautify</title>
      <link>https://dexterposh.github.io/posts/011-dotnet-pwsh-json/</link>
      <pubDate>Mon, 05 Oct 2020 09:07:45 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/011-dotnet-pwsh-json/</guid>
      <description>Background I have been following up the C# Tutorial and working my way through examples and converting them to PowerShell and notes.
JSON Create object Interesting to see that System.Text.Json namespace offers Utf8JsonWriter type to write JSON (UTF-8 encoded) string from common .</description>
    </item>
    
    <item>
      <title>PowerShell to C# &amp; back - JSON Seriazlie &amp; Deserialize</title>
      <link>https://dexterposh.github.io/posts/010-dotnet-pwsh-json/</link>
      <pubDate>Fri, 25 Sep 2020 07:12:33 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/010-dotnet-pwsh-json/</guid>
      <description>Background In the below previous post
 PowerShell to C# &amp;amp; back - JSON parse &amp;amp; enumerate  there were notes on how to enumerate &amp;amp; iterate over JSON documents. Let&amp;rsquo;s continue down the rabbit hole.</description>
    </item>
    
    <item>
      <title>PowerShell to C# &amp; back - JSON parse &amp; enumerate</title>
      <link>https://dexterposh.github.io/posts/009-dotnet-pwsh-json/</link>
      <pubDate>Wed, 16 Sep 2020 11:12:33 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/009-dotnet-pwsh-json/</guid>
      <description>Background Coming from PowerShell background, while learning ASP.NET Core based development I wanted to wrap my head around how to handle JSON, so ended up taking notes on how to do this in C# and as an exercise convert those into PowerShell code snippets for my reference.</description>
    </item>
    
    <item>
      <title>PowerShell Classes - Validating ARM parameters</title>
      <link>https://dexterposh.github.io/posts/007-pwsh-class-usecase/</link>
      <pubDate>Mon, 29 Jun 2020 19:42:59 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/007-pwsh-class-usecase/</guid>
      <description>Origin‚ùì (shameless plug, alert!) üôÉ
Recently, I was discussing with my colleague about this new book I am co-authoring (with Prateek) about why to learn .NET to be a better PowerShell programmer and upon further discussion we pondered some interesting ways to use PowerShell classes.</description>
    </item>
    
    <item>
      <title>AKS PowerShell Tip - Add Authorized Ip</title>
      <link>https://dexterposh.github.io/posts/005-aks-tip-ip/</link>
      <pubDate>Fri, 01 May 2020 12:21:28 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/005-aks-tip-ip/</guid>
      <description>Background üêº Recently, I found out that there is no sane way to perform adding a public IP address to the authorized IP address ranges using either the Az CLI or Az.</description>
    </item>
    
    <item>
      <title>Azure DevOps Tip - Find private APIs</title>
      <link>https://dexterposh.github.io/posts/002-azdo-tip-api/</link>
      <pubDate>Tue, 14 Apr 2020 15:06:22 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/002-azdo-tip-api/</guid>
      <description>Problem Often working with Azure DevOps, I hit a wall trying to automate some tasks but there are no REST APIs made public yet.
It was one of those task of automating creation of Environments in multi-stage YAML based pipelines in AzDO.</description>
    </item>
    
  </channel>
</rss>