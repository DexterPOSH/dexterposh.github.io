<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iac on System Engineer taking Dev?Ops notes</title>
    <link>https://dexterposh.github.io/tags/iac/</link>
    <description>Recent content in iac on System Engineer taking Dev?Ops notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 May 2020 15:18:35 +0530</lastBuildDate>
    
	<atom:link href="https://dexterposh.github.io/tags/iac/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Posts</title>
      <link>https://dexterposh.github.io/posts/</link>
      <pubDate>Mon, 29 Jun 2020 19:42:59 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PowerShell Classes - Validating input data</title>
      <link>https://dexterposh.github.io/posts/007-pwsh-class-usecase/</link>
      <pubDate>Mon, 29 Jun 2020 19:42:59 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/007-pwsh-class-usecase/</guid>
      <description>&lt;h2 id=&#34;origin&#34;&gt;Origin‚ùì&lt;/h2&gt;
&lt;p&gt;(shameless plug, alert!) üôÉ&lt;/p&gt;
&lt;p&gt;Recently, I was discussing with my colleague about this new &lt;a href=&#34;https://leanpub.com/powershell-to-csharp&#34;&gt;book&lt;/a&gt; I am co-authoring (with &lt;a href=&#34;https://twitter.com/singhprateik&#34;&gt;Prateek&lt;/a&gt;) about why to learn .NET to be a better PowerShell programmer and upon further discussion we pondered some interesting ways to use PowerShell classes.&lt;/p&gt;
&lt;h2 id=&#34;brain-storming-&#34;&gt;Brain-storming ü§î&lt;/h2&gt;
&lt;p&gt;All was lost, until we had another quick conversation about how to validate ARM templates.
Well, I suggested to write Pester tests to check the input being passed and perform &lt;code&gt;Test-AzDeployment&lt;/code&gt; for ARM templates.&lt;/p&gt;
&lt;p&gt;Another idea that popped up in my mind was what if we write a PowerShell class to model the ARM parameters file and use that to validate the ARM template parameter inputs.&lt;/p&gt;
&lt;h2 id=&#34;solution-&#34;&gt;Solution üöÄ&lt;/h2&gt;
&lt;p&gt;There exists the &lt;a href=&#34;https://github.com/dfinke/ConvertToClass&#34;&gt;ConvertToClass&lt;/a&gt; module by Doug Finke, whic comes to the rescue to automatically convert a JSON object to a PowerShell class. It even has VSCode integration, check it out.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start by taking a sample &lt;code&gt;azuredeploy.parameters.json&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Azurearm6754&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westus2&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;convert-json-to-class-&#34;&gt;Convert Json to Class ‚òØ&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s run the &lt;code&gt;ConverTo-Class&lt;/code&gt; function in the ConvertToClass module against this &lt;code&gt;azuredeploy.parameters.json&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;ConvertTo-Class -Target (Get-Content ./azuredeploy.parameters.json -Raw)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/007/class1.png&#34; alt=&#34;alt&#34;&gt;&lt;/p&gt;
&lt;p&gt;Above command generates below content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;class RootObject1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$$schema
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$contentVersion
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[parameters]&lt;/span&gt;$parameters
}

class parameters1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[storageAccountNamePrefix]&lt;/span&gt;$storageAccountNamePrefix
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[numberofStorageAccounts]&lt;/span&gt;$numberofStorageAccounts
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[storageAccountType]&lt;/span&gt;$storageAccountType
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[location]&lt;/span&gt;$location
}

class storageAccountNamePrefix1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class numberofStorageAccounts1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[int]&lt;/span&gt;$value
}

class storageAccountType1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class location1 {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s rename the above classes like below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$$schema&lt;/code&gt; property on &lt;code&gt;RootObject1&lt;/code&gt; to &lt;code&gt;${$schema}&lt;/code&gt;, done to escape &lt;code&gt;$&lt;/code&gt; char in property name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RootObject1&lt;/code&gt; to &lt;code&gt;AzureParameters&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parameters1&lt;/code&gt; to &lt;code&gt;Parameters&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storageAccountNamePrefix1&lt;/code&gt; to &lt;code&gt;StorageAccountType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numberofStorageAccounts1&lt;/code&gt; to &lt;code&gt;StorageAccountType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storageAccountType1&lt;/code&gt; to &lt;code&gt;StorageAccountType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location1&lt;/code&gt; to &lt;code&gt;Location&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;add-validation-attributes-&#34;&gt;Add validation attributes ‚åö&lt;/h3&gt;
&lt;p&gt;We can add validation attributes to the &lt;code&gt;$value&lt;/code&gt; inside the auto-generated class to add some quick validation rules to the properties present on the class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;class AzureParameters {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;${$schema}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$contentVersion
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[Parameters]&lt;/span&gt;$parameters
}

class Parameters {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[StorageAccountNamePrefix]&lt;/span&gt;$storageAccountNamePrefix
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[NumberofStorageAccounts]&lt;/span&gt;$numberofStorageAccounts
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[StorageAccountType]&lt;/span&gt;$storageAccountType
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[Location]&lt;/span&gt;$location
}

class StorageAccountNamePrefix {
    &lt;span style=&#34;color:#75715e&#34;&gt;# use the regex to validate lowercase letters and number in the name&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidatePattern&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^([a-z]|[0-9])+$&amp;#34;&lt;/span&gt;)]
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateLength&lt;/span&gt;(3,24)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class StorageAccountNamePrefix {
    &lt;span style=&#34;color:#75715e&#34;&gt;# restricting the min=1 and max=10 storage accounts that one can request&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateRange&lt;/span&gt;(1,10)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[int]&lt;/span&gt;$value
}

class StorageAccountType {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Restricting the StorageAccount SKUs&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateSet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_LRS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_GRS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_ZRS&amp;#39;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class Location {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Restricting the locations&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateSet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;westus2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;northcentralus&amp;#39;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;add-logic-inside-empty-constructor-&#34;&gt;Add logic inside Empty Constructor ‚åõ&lt;/h3&gt;
&lt;p&gt;We can add one more trick to the bag to add an empty constructor explicitly (this is present when no constructor exists) and put some more validation logic if the current validate attributes doesn&amp;rsquo; suit the needs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;class AzureParameters {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;${$schema}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$contentVersion
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[Parameters]&lt;/span&gt;$parameters
}

class Parameters {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[StorageAccountNamePrefix]&lt;/span&gt;$storageAccountNamePrefix
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[NumberofStorageAccounts]&lt;/span&gt;$numberofStorageAccounts
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[StorageAccountType]&lt;/span&gt;$storageAccountType
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[Location]&lt;/span&gt;$location
}

class StorageAccountNamePrefix {
    &lt;span style=&#34;color:#75715e&#34;&gt;# use the regex to validate lowercase letters and number in the name&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateLength&lt;/span&gt;(3,24)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}

class NumberofStorageAccounts {
    &lt;span style=&#34;color:#75715e&#34;&gt;# restricting the min=1 and max=10 storage accounts that one can request&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateRange&lt;/span&gt;(1,10)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[int]&lt;/span&gt;$value
}

class StorageAccountType {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Restricting the StorageAccount SKUs&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateSet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_LRS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_GRS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_ZRS&amp;#39;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value

    &lt;span style=&#34;color:#75715e&#34;&gt;# Add some more validation logic inside the empty constructor&lt;/span&gt;
    storageAccountType() {
        &lt;span style=&#34;color:#75715e&#34;&gt;# Perform some validation on the property&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($this.value &lt;span style=&#34;color:#f92672&#34;&gt;-ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Standard_ZRS&amp;#39;&lt;/span&gt;) {
            Write-Warning -Message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No zone redundancy&amp;#34;&lt;/span&gt;
        }
    }
}

class Location {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Restricting the locations&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;ValidateSet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;westus2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;northcentralus&amp;#39;&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$value
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Why does this has to be an empty constructor?
The answer is that we will be a using a trick with how we create an instance of the class in next section&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;secret-sauce--cast-initialization-&#34;&gt;Secret-Sauce : Cast-Initialization üç≤&lt;/h3&gt;
&lt;p&gt;Credit goes to Buce Payette&amp;rsquo;s &lt;a href=&#34;https://livebook.manning.com/book/windows-powershell-in-action-third-edition/chapter-19/311&#34;&gt;Windows PowerShell in Action 3rd&lt;/a&gt; edition which talks a bit about this technique in a brief.&lt;/p&gt;
&lt;p&gt;In short, you can take schemaless data in two forms e.g. hashTable or PSObjects and convert them to strongly typed object instances.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For cast-initalization technique to work an empty constructor needs to be present in the Class definition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Modify some value in the &lt;code&gt;azuredeploy.parameters.json&lt;/code&gt; file to not-follow some validation logic we added like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurearm6754&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westus2&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, see the result when casting this as our &lt;code&gt;ArmParameters&lt;/code&gt; class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[azureparameters]&lt;/span&gt; (Get-Content -Path $PSScriptRoot/azuredeploy.parameters.json | ConvertFrom-Json)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/007/validation.png&#34; alt=&#34;Validation in Action&#34;&gt;&lt;/p&gt;
&lt;p&gt;Throws below error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-error&#34; data-lang=&#34;error&#34;&gt;InvalidArgument: Cannot convert value &amp;quot;@{$schema=https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#; contentVersion=1.0.0.0; parameters=}&amp;quot; to type &amp;quot;AzureParameters&amp;quot;. Error: &amp;quot;Cannot convert value &amp;quot;@{storageAccountNamePrefix=; numberofStorageAccounts=; storageAccountType=; location=}&amp;quot; to type &amp;quot;Parameters&amp;quot;. Error: &amp;quot;Cannot create object of type &amp;quot;NumberofStorageAccounts&amp;quot;. The 20 argument is greater than the maximum allowed range of 10. Supply an argument that is less than or equal to 10 and then try the command again.&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Fix the value for the &lt;code&gt;numberofStorageAccounts&lt;/code&gt; parameter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurearm6754&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westus2&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the below again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[azureparameters]&lt;/span&gt; (Get-Content -Path $PSScriptRoot/azuredeploy.parameters.json | ConvertFrom-Json)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/007/valid.png&#34; alt=&#34;Validation passes&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion-&#34;&gt;Conclusion ‚úÖ&lt;/h2&gt;
&lt;p&gt;This is maybe a very naive way of solving this but I read about a topic and used it to solve a problem in a unique way, which is a win for me üòé.&lt;/p&gt;
&lt;p&gt;I think slowly embracing more Object-Oriented programming using PowerShell classes (or C#) can open up some interesting ways to solve problems in my tooling.&lt;/p&gt;
&lt;h2 id=&#34;resource-links-&#34;&gt;Resource links üìö&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/powershell-to-csharp&#34;&gt;PowerShell to C# and back&lt;/a&gt; - Disclaimer: co-author on this one.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ridicurious.com/2020/06/29/powershell-to-csharp-and-back-classes/&#34;&gt;PowerShell to C# and Back ‚Äì Introduction to Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://livebook.manning.com/book/windows-powershell-in-action-third-edition&#34;&gt;Windows PowerShell in Action, 3rd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dfinke/ConvertToClass&#34;&gt;Doug Finke&amp;rsquo;s ConverToClass module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Stephanevg/PSClassUtils&#34;&gt;PSClassUtils&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>.NET notes - create SHA256 hash</title>
      <link>https://dexterposh.github.io/posts/003-dotnet-sha256-hash/</link>
      <pubDate>Fri, 05 Jun 2020 10:18:40 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/003-dotnet-sha256-hash/</guid>
      <description>&lt;h2 id=&#34;background-&#34;&gt;Background üßê&lt;/h2&gt;
&lt;p&gt;Today I was looking to generate SHA256 hash for input string data.
Below are my notes on how I used dotnet script (interactive scripting experience) in .NET to experiment with it.&lt;/p&gt;
&lt;p&gt;P.S. - Writing these small .NET recipes helps me in absorbing more.&lt;/p&gt;
&lt;h2 id=&#34;walkthrough-&#34;&gt;Walkthrough ‚ö°&lt;/h2&gt;
&lt;h3 id=&#34;using-dotnet-script&#34;&gt;Using dotnet script&lt;/h3&gt;
&lt;p&gt;To quickly test features in .NET core, I use the &lt;a href=&#34;https://www.nuget.org/packages/dotnet-script/&#34;&gt;&lt;em&gt;dotnet script&lt;/em&gt;&lt;/a&gt; global tool.&lt;/p&gt;
&lt;p&gt;Begin with creating a dotnet script file (.csx extension).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir hashing
cd hashing
dotnet script init sha256hash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above dotnet command creates an executable file with below content.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!/usr/bin/env dotnet-script

Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since this is an executable script, we can run it like this as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./sha256hash.csx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-output&#34; data-lang=&#34;output&#34;&gt;Hello world!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;using-statements-in-scripts&#34;&gt;Using statements in scripts&lt;/h3&gt;
&lt;p&gt;Now, let&amp;rsquo;s modify this script to explore creating a SHA256 hash.&lt;/p&gt;
&lt;p&gt;First, thing is we need to place some using statements to bring in the Cryptography and Text namespace like below.&lt;/p&gt;
&lt;p&gt;So the content now looks like.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!/usr/bin/env dotnet-script

&lt;span style=&#34;color:#75715e&#34;&gt;// Add the using statements
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Text;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Security.Cryptography;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reading-the-docs&#34;&gt;Reading the docs&lt;/h3&gt;
&lt;p&gt;Moving on, after browsing the documentation of the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha256.create?view=netcore-3.1#System_Security_Cryptography_SHA256_Create&#34;&gt;SHA256 class&lt;/a&gt; I noticed a &lt;em&gt;Create()&lt;/em&gt; method which creates a default instance.&lt;/p&gt;
&lt;p&gt;Also, noticed that the inheritance chain for this class is
Object -&amp;gt; HashAlgorithm -&amp;gt; SHA256&lt;/p&gt;
&lt;p&gt;HashAlgorithm is the base class with below signature, notice it in turn inherits from IDisposable interface this immediately reminded me to use the &lt;code&gt;using&lt;/code&gt; statement syntax to conveniently dispose this object after re-use, rather than calling &lt;code&gt;Dispose()&lt;/code&gt; method myself inside try/catch/finally statements.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HashAlgorithm&lt;/span&gt; : IDisposable, System.Security.Cryptography.ICryptoTransform
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!/usr/bin/env dotnet-script

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Text;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Security.Cryptography;

&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DexterPOSH&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// this is our text for which we will generate hash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (SHA256 hashAlgorithm = SHA256.Create())
{
    &lt;span style=&#34;color:#75715e&#34;&gt;// place holder
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The docs also reveal the &lt;code&gt;ComputeHash()&lt;/code&gt; method which takes &lt;code&gt;byte[]&lt;/code&gt; array as argument and returns the byte array back as well.
We need some way to convert our string input to byte array.&lt;/p&gt;
&lt;h3 id=&#34;string-to-byte-conversion&#34;&gt;string to byte[] conversion&lt;/h3&gt;
&lt;p&gt;Quick search suggests to use &lt;code&gt;Encoding.UTF8.GetBytes()&lt;/code&gt; static method for converting string to byte array.
Using that in code now leads us to this point.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!/usr/bin/env dotnet-script

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Text;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Security.Cryptography;

&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DexterPOSH&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// this is our text for which we will generate hash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (SHA256 hashAlgorithm = SHA256.Create())
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; hashedByteArray = hashAlgorithm.ComputeHash(Encoding.UTF8.GetBytes(input));
    Console.WriteLine(hashedByteArray);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-output&#34; data-lang=&#34;output&#34;&gt;System.Byte[]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s see how we can convert the byte[] to string object.&lt;/p&gt;
&lt;h3 id=&#34;byte-to-string-conversion&#34;&gt;byte[] to string conversion&lt;/h3&gt;
&lt;p&gt;Again search and got a hint of using the &lt;code&gt;BitConverter.ToString()&lt;/code&gt; static method.
Let&amp;rsquo;s add that logic in our script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!/usr/bin/env dotnet-script

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Text;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Security.Cryptography;

&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DexterPOSH&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// this is our text for which we will generate hash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (SHA256 hashAlgorithm = SHA256.Create())
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; hashedByteArray = hashAlgorithm.ComputeHash(Encoding.UTF8.GetBytes(input));
    Console.WriteLine(BitConverter.ToString(hashedByteArray));
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-output&#34; data-lang=&#34;output&#34;&gt;1C-29-A2-30-0A-8A-99-6F-67-60-70-7E-21-0D-BD-61-B1-C9-3A-B7-4F-86-EE-13-7B-2E-DE-B6-01-6E-87-93
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;remove---from-string&#34;&gt;remove &amp;lsquo;-&amp;rsquo; from string&lt;/h3&gt;
&lt;p&gt;As the last step let&amp;rsquo;s replace the char &lt;code&gt;-&lt;/code&gt; from the output string.
&lt;code&gt;String&lt;/code&gt; class has replace method which invoke.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!/usr/bin/env dotnet-script

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Text;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Security.Cryptography;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (SHA256 hashAlgorithm = SHA256.Create())
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; input = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DexterPOSH&amp;#34;&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] data = hashAlgorithm.ComputeHash(
        Encoding.UTF8.GetBytes(input)
    );
    Console.WriteLine(BitConverter.ToString(data).Replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, String.Empty));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-output&#34; data-lang=&#34;output&#34;&gt;1C29A2300A8A996F6760707E210DBD61B1C93AB74F86EE137B2EDEB6016E8793
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;solution-&#34;&gt;Solution üòé&lt;/h2&gt;
&lt;p&gt;Content of the sha256hash.csx file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!/usr/bin/env dotnet-script

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Text;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Security.Cryptography;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (SHA256 hashAlgorithm = SHA256.Create())
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; input = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DexterPOSH&amp;#34;&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] data = hashAlgorithm.ComputeHash(
        Encoding.UTF8.GetBytes(input)
    );
    Console.WriteLine(BitConverter.ToString(data).Replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, String.Empty));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the above file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dotnet script run ./sha256hash.csx &lt;span style=&#34;color:#75715e&#34;&gt;# or simply ./sha256hash.csx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-output&#34; data-lang=&#34;output&#34;&gt;1C29A2300A8A996F6760707E210DBD61B1C93AB74F86EE137B2EDEB6016E8793
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;reference-links-&#34;&gt;Reference links üìñ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha256?view=netcore-3.1#constructors&#34;&gt;System.Security.CryptoGraphy Class&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.hashalgorithm?view=netcore-3.1&#34;&gt;HashAlgorithm Base Class&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement&#34;&gt;using statement reference in C#&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.c-sharpcorner.com/article/c-sharp-string-to-byte-array/&#34;&gt;C# String To Byte Array&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.c-sharpcorner.com/article/how-to-convert-a-byte-array-to-a-string/&#34;&gt;Convert Byte Array To String In C#&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ARM templates - iterate &amp; deploy resource</title>
      <link>https://dexterposh.github.io/posts/006-arm-template-loop/</link>
      <pubDate>Tue, 26 May 2020 15:18:35 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/006-arm-template-loop/</guid>
      <description>&lt;h2 id=&#34;background-&#34;&gt;Background üßê&lt;/h2&gt;
&lt;p&gt;I like ARM templates, I use it a lot to deploy Azure cloud resources but as all things it has some pain points associated with it. In this post, let&amp;rsquo;s see how you can iterate over based on certain logic and deploy multiple resources using linked templates.&lt;/p&gt;
&lt;p&gt;As it stands out this logic of iterating over and deploying multiple instances of a resource tripped me a lot in the beginning.&lt;/p&gt;
&lt;h2 id=&#34;walkthrough-&#34;&gt;Walkthrough üèÉ&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s work through the whole process of writing an ARM template which deploys multiple resources.&lt;/p&gt;
&lt;p&gt;Github Repository - &lt;a href=&#34;https://github.com/DexterPOSH/ArmTemplateLoopExample&#34;&gt;ArmTemplateLoopExample&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a simple post demonstrating looping logic I often use, feel free to sprinkle your own best practices &amp;amp; modifications on top e.g. storing templates in a private Cloud blob container, adding more parameters, names etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;scenario&#34;&gt;Scenario&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s take a scenario of deploying many storage accounts based on the user input.&lt;/p&gt;
&lt;p&gt;Ideally, if you&amp;rsquo;re in this situation you should write 2 templates and utilize ARM linked templates to deploy them because it becomes too cumbersome to maintain a single ARM template to deploy a resource and loop over user-input and deploy multiple iterations of that resource. Trust me this is coming from experience üòâ&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s start by creating 2 templates, I am going to use GitHub repository here for storing those but you can use a Cloud blob store account as well.&lt;/p&gt;
&lt;p&gt;Below is how my project directory layout looks like.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-output&#34; data-lang=&#34;output&#34;&gt;.
‚îú‚îÄ‚îÄ azuredeploy.json
‚îî‚îÄ‚îÄ linkedTemplate
   ‚îî‚îÄ‚îÄ storageaccount.json
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;author-linked-template&#34;&gt;Author linked template&lt;/h3&gt;
&lt;p&gt;First thing to do when you&amp;rsquo;re writing an ARM template is to make sure you understand that component properly, how it works, best practices while using that Azure component etc. Why? you might be wondering because ARM templates is how you deploy your Azure cloud infrastructure and it would be as good as you make your ARM templates, they&amp;rsquo;re called blueprints for your Azure resources for this reason.&lt;/p&gt;
&lt;p&gt;But at the same time start small and head over to &lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates&#34;&gt;azure-quickstart-templates&lt;/a&gt; repository to get some samples.&lt;/p&gt;
&lt;p&gt;I found out that the template stored here in this &lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates/blob/master/101-storage-account-create/azuredeploy.json&#34;&gt;101-storage-account-create&lt;/a&gt; example is good enough for me. So, let me copypasta ‚úç this and place the content inside my &lt;code&gt;linkedtemplate\storageaccount.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;So, we have a starting point which can deploy a single storage account for us, but you would notice on closer inspection that this &lt;code&gt;storageaccount.json&lt;/code&gt; template doesn&amp;rsquo;t take storageAccountName as a parameter but generates it in the variables section.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s quickly modify it. Changes made:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add parameter &lt;code&gt;storageAccountName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;remove variable &lt;code&gt;storageAccountName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;change &lt;code&gt;[variables(&#39;storageAccountName&#39;)]&lt;/code&gt; references to &lt;code&gt;[parameters(&#39;storageAccountName&#39;)]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;added&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;storageAccountName&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;parameter&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
     },
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_ZRS&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Premium_LRS&amp;#34;&lt;/span&gt;
       ],
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Storage Account type&amp;#34;&lt;/span&gt;
       }
     },
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location for all resources.&amp;#34;&lt;/span&gt;
       }
     }
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;: {
     &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;removed&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;storageAccountName&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;here&lt;/span&gt;
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;: [
     {
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-04-01&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountName&amp;#39;)]&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;location&amp;#39;)]&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;sku&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountType&amp;#39;)]&amp;#34;&lt;/span&gt;
       },
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StorageV2&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {}
     }
   ],
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;outputs&amp;#34;&lt;/span&gt;: {
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: {
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountName&amp;#39;)]&amp;#34;&lt;/span&gt;
     }
   }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;author-the-stitching-logic&#34;&gt;Author the stitching logic&lt;/h3&gt;
&lt;p&gt;Moving on to the logic of consolidating user input and then looping over and deploying a storage account multiple times.&lt;/p&gt;
&lt;p&gt;The gist is that we have to do below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use variable iteration to create an array of objects based on our &lt;code&gt;numberofStorageAccounts&lt;/code&gt; parameter value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use resource iteration later with a linked template deployment and index into the array created above for parameter values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t worry if this is a bit daunting. It was for me the first time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;adding-barebone-template&#34;&gt;Adding barebone template&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s start by creating a blank ARM template. Open the &lt;code&gt;azuredeploy.json&lt;/code&gt; in VSCode. Key in &lt;code&gt;arm&lt;/code&gt; and it would give you a snippet dropdown, select the first one for targeting a Resource group deployment.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/006/arm_snippets.png&#34; alt=&#34;alt&#34;&gt;&lt;/p&gt;
&lt;p&gt;So, we get this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {},
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;functions&amp;#34;&lt;/span&gt;: [],
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;: {},
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;: [],
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;outputs&amp;#34;&lt;/span&gt;: {}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;add-parameters&#34;&gt;Add parameters&lt;/h5&gt;
&lt;p&gt;Time to add in some parameters to our &lt;code&gt;azuredeploy.json&lt;/code&gt; which is end-user facing. So you need to take input in this one from the user (which could be yourself as well) and then pass those over to the linkedtemplate.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;storageAccountNamePrefix - prefix for the storage accounts to be deployed. Length 5-10.&lt;/li&gt;
&lt;li&gt;numberofStorageAccounts - integer representing how many storage accounts to deploy. [Default - 1, Min 1, Max 10.&lt;/li&gt;
&lt;li&gt;storageAccountType - Type of the storage accounts, predefined allowed values. Default - Standard_GRS.&lt;/li&gt;
&lt;li&gt;location - location for the storage accounts. Default is RG location.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is how the &lt;code&gt;parameters&lt;/code&gt; object looks now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;minLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;maxLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;minValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;maxValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_ZRS&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Premium_LRS&amp;#34;&lt;/span&gt;
    ]
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location for all resources.&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;add-the-variables-iteration-logic&#34;&gt;Add the variables (iteration logic)&lt;/h5&gt;
&lt;p&gt;I typically like to use variables a lot for transforming the input parameters and then using these variables later in the resources because it makes it easier in future to just modify these variables at once place.&lt;/p&gt;
&lt;p&gt;Use the concept of &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/copy-variables&#34;&gt;variable iteration&lt;/a&gt; in ARM templates.&lt;/p&gt;
&lt;p&gt;We use the above concept to do the below&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a variable named &lt;code&gt;_deployMultipleStorageAccounts&lt;/code&gt; (sort of a convention I follow to name these variables used later in deployment to preceed with &lt;code&gt;_deploy&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Use the parameter &lt;code&gt;numberofStorageAccounts&lt;/code&gt; to loop over that many times&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;input&lt;/code&gt; property in the copy loop object to generate an object containing properties which will be mapped one to one with the linked template storage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I prefer one to one mapping between the properties inside the &lt;code&gt;input&lt;/code&gt; in the copy loop to the parameters of the linked template. It makes it easier to index into them and specify them (you&amp;rsquo;ll see later).&lt;/p&gt;
&lt;p&gt;Below is a gist of what I added in the variables property.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;: [
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_deployMultipleStorageAccounts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;used&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;later&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;resources&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;numberofStorageAccounts&amp;#39;)]&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;loop&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;numberofStorageAccounts&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;time&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;: { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;con&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountType&amp;#39;)]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;location&amp;#39;)]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          concat(
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            parameters(&amp;#39;storageAccountNamePrefix&amp;#39;),
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            uniqueString(resourceGroup().id),
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            copyIndex(&amp;#39;_deployMultipleStorageAccounts&amp;#39;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        ]&amp;#34;&lt;/span&gt;
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the outputs section we added a &lt;code&gt;variables&lt;/code&gt; property which essentially displays the value for the variable &lt;code&gt;_deployMultipleStorageAccounts&lt;/code&gt;. This can be used later with a trick to see what values go inside this variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outputs&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_deployMultipleStorageAccounts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[variables(&amp;#39;_deployMultipleStorageAccounts&amp;#39;)]&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, I added a &lt;code&gt;variables&lt;/code&gt; property in the output which is used to display what goes inside this variable once it is run by ARM API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/006/transformParams.png&#34; alt=&#34;alt&#34;&gt;&lt;/p&gt;
&lt;p&gt;From a data-view point above creates a variable named &lt;code&gt;_deployMultipleStorageAccounts&lt;/code&gt; which is an array of Json objects.&lt;/p&gt;
&lt;p&gt;If we assume the &lt;code&gt;parameters(&#39;numberofStorageAccounts&#39;)&lt;/code&gt; is 2, &lt;code&gt;parameters(&#39;storageAccountType&#39;)&lt;/code&gt; is &lt;em&gt;Standard_GRS&lt;/em&gt; and &lt;code&gt;parameters(&#39;location&#39;)&lt;/code&gt; is &lt;em&gt;SouthEastAsia&lt;/em&gt;, then it creates an array like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;generatedValuebyARM&amp;gt;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;loation&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SouthEastAsia&amp;#34;&lt;/span&gt;,
  },
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;generatedValuebyARM&amp;gt;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SouthEastAsia&amp;#34;&lt;/span&gt;,
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;add-the-deployment-resource&#34;&gt;Add the deployment resource&lt;/h4&gt;
&lt;p&gt;Now, you already know we have the linked template to deploy a single storage account. So, we just need to invoke/call that template multiple times and pass in paramters.&lt;/p&gt;
&lt;p&gt;This is done by an ARM template technique called as ARM template linked templates. Read about it more &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/linked-templates#linked-template&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Follow a &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deployment-tutorial-linked-template?tabs=azure-powershell#create-a-linked-template&#34;&gt;Tutorial&lt;/a&gt; to deploy a linked template, if this is the firs time you&amp;rsquo;re hearing about this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In short, within our &lt;code&gt;azuredeploy.json&lt;/code&gt; template we need to use a resource of type &lt;code&gt;Microsoft.Resources/deployments&lt;/code&gt; to link to our &lt;code&gt;storageaccount.json&lt;/code&gt; template and inside this resource we need to use another concept termed as &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/copy-resources&#34;&gt;&lt;em&gt;Resource iteration&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s add it.&lt;/p&gt;
&lt;p&gt;This is how my resources array property looks like.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Microsoft.Resources/deployments&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-10-01&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;condition&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[concat(&amp;#39;deploy-linkedStorageTemplate&amp;#39;, copyIndex())]&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;numberofStorageAccounts&amp;#39;)]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_loopToDeployStorageAccounts&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parallel&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Incremental&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;templateLink&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;uri&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://raw.githubusercontent.com/DexterPOSH/ArmTemplateLoopExample/master/linkedtemplate/storageaccount.json&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[variables(&amp;#39;_deployMultipleStorageAccounts&amp;#39;)[copyIndex()].storageAccountName]&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[variables(&amp;#39;_deployMultipleStorageAccounts&amp;#39;)[copyIndex()].storageAccountType]&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[variables(&amp;#39;_deployMultipleStorageAccounts&amp;#39;)[copyIndex()].location]&amp;#34;&lt;/span&gt;
        }
      }
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I know it&amp;rsquo;s a handful but below is a breakdown of major things it does.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uses &lt;code&gt;Microsoft.Resources/deployments&lt;/code&gt; resource type to deploy another template.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note we generate a unique name for the deployment by concating the &lt;code&gt;copyIndex()&lt;/code&gt;
The &lt;code&gt;condition&lt;/code&gt; property is set to &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Microsoft.Resources/deployments&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-10-01&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;condition&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[concat(&amp;#39;deploy-linkedStorageTemplate&amp;#39;, copyIndex())]&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&amp;lt;--&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;skipped&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;below&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;properties&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;--&amp;gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Uses the &lt;code&gt;uri&lt;/code&gt; of the raw template link for the &lt;code&gt;storageaccount.json&lt;/code&gt; in the GitHub repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;templateLink&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;uri&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://raw.githubusercontent.com/DexterPOSH/ArmTemplateLoopExample/master/linkedtemplate/storageaccount.json&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Uses resource iteration by using &lt;code&gt;copy&lt;/code&gt; property and using the &lt;code&gt;parameters(&#39;numberofStorageAccounts&#39;)&lt;/code&gt; as the value for count, which means it loops over this resource this many times. Also, gives this copy loop a friendly name &lt;code&gt;_loopToDeployStorageAccounts&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[parameters(&amp;#39;numberofStorageAccounts&amp;#39;)]&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_loopToDeployStorageAccounts&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Passes on the parameters to this linked template by indexing into the variable &lt;code&gt;_deployMultipleStorageAccounts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[variables(&amp;#39;_deployMultipleStorageAccounts&amp;#39;)[copyIndex()].storageAccountName]&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;dry-run---verify-variable-iteration-logic&#34;&gt;Dry run - Verify Variable iteration logic&lt;/h4&gt;
&lt;p&gt;Based on my experience with this approach of looping over, we can most of the time validate what is inside the variable created for looping to verify it will work.&lt;/p&gt;
&lt;p&gt;Remember the &lt;code&gt;condition&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; for our linked template deployment resource, which means when we submit this ARM template for deployment it won&amp;rsquo;t trigger it but however the &lt;code&gt;azuredeploy.json&lt;/code&gt; will be processed and we will get the output back which contains the &lt;code&gt;variables&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create an ARM template parameters file, with the new release of the ARM tools VSCode extension, it is natively possible to generate these parameters file. Read more in the release notes &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=msazurermtools.azurerm-vscode-tools&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Click on &lt;em&gt;Select Parameter File&amp;hellip;&lt;/em&gt; (at the bottom) &amp;gt; &lt;em&gt;New&lt;/em&gt; &amp;gt; &lt;em&gt;All parameters&lt;/em&gt; &amp;gt; Save it. Open it and fill the values.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/006/generateParam.png&#34; alt=&#34;Generate ARM parameters file&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is how it looks after adding values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountNamePrefix&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurearm6754&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;numberofStorageAccounts&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;southindia&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Deploy it using Az PowerShell module cmdelt&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$rg =  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_arm_rg&amp;#34;&lt;/span&gt;
New-AzResourceGroupDeployment -TemplateFile ./azuredeploy.json -TemplateParameterFile ./azuredeploy.parameters.json -ResourceGroupName $rg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-output&#34; data-lang=&#34;output&#34;&gt;DeploymentName          : azuredeploy
ResourceGroupName       : test_arm_rg
ProvisioningState       : Succeeded
Timestamp               : 06/07/2020 14:24:21
Mode                    : Incremental
TemplateLink            :
Parameters              :
                          Name                        Type                       Value
                          ==========================  =========================  ==========
                          storageAccountNamePrefix    String                     azurearm6754
                          numberofStorageAccounts     Int                        2
                          storageAccountType          String                     Standard_GRS
                          location                    String                     southindia

Outputs                 :
                          Name             Type                       Value
                          ===============  =========================  ==========
                          variables        Object                     {
                            &amp;quot;_deployMultipleStorageAccounts&amp;quot;: [
                              {
                                &amp;quot;storageAccountType&amp;quot;: &amp;quot;Standard_GRS&amp;quot;,
                                &amp;quot;location&amp;quot;: &amp;quot;southindia&amp;quot;,
                                &amp;quot;storageAccountName&amp;quot;: &amp;quot;azurearm67543ub5zsu77klvq0&amp;quot;
                              },
                              {
                                &amp;quot;storageAccountType&amp;quot;: &amp;quot;Standard_GRS&amp;quot;,
                                &amp;quot;location&amp;quot;: &amp;quot;southindia&amp;quot;,
                                &amp;quot;storageAccountName&amp;quot;: &amp;quot;azurearm67543ub5zsu77klvq1&amp;quot;
                              }
                            ]
                          }

DeploymentDebugLogLevel :
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Look at the outputs section, it clearly lists out the variable we generated and upon which our whole logic of depolying multiple resources existed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_deployMultipleStorageAccounts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;southindia&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurearm67543ub5zsu77klvq0&amp;#34;&lt;/span&gt;
  },
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;southindia&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurearm67543ub5zsu77klvq1&amp;#34;&lt;/span&gt;
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;test-the-solution&#34;&gt;Test the solution&lt;/h3&gt;
&lt;p&gt;Once the variable iteration logic is verified, it is time to deploy the tempalte to see that it actually creates.&lt;/p&gt;
&lt;p&gt;Wait! before you jump into testing it you need to make a minor change. Can you guess what? Set &lt;code&gt;condition&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; inside the linked template deployment resource.&lt;/p&gt;
&lt;p&gt;Below is a snippet of where that change goes inside the template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Microsoft.Resources/deployments&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-10-01&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;condition&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;actually&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;deploy&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;linked&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;template&lt;/span&gt;,
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&amp;lt;--&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;skipped&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;below&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;properties&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;--&amp;gt;&lt;/span&gt;
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Deploy again, this time it should deploy multiple storage accounts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$rg =  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_arm_rg&amp;#34;&lt;/span&gt;
New-AzResourceGroupDeployment -TemplateFile ./azuredeploy.json -TemplateParameterFile ./azuredeploy.parameters.json -ResourceGroupName $rg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tldr-solution-&#34;&gt;TLDR; Solution üóû&lt;/h2&gt;
&lt;p&gt;Head over to this GitHub repository to see the ARM templates.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/DexterPOSH/ArmTemplateLoopExample&#34;&gt;ArmTemplateLoopExample&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;references-&#34;&gt;References üìö&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=msazurermtools.azurerm-vscode-tools&#34;&gt;Azure Resource Manager (ARM) Tools VSCode extension&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates&#34;&gt;Azure QuickStart Templates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/linked-templates#linked-template&#34;&gt;Linked Templates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deployment-tutorial-linked-template?tabs=azure-powershell#create-a-linked-template&#34;&gt;Deploy a linked template tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/copy-resources&#34;&gt;Resource-Ieration&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AKS PowerShell Tip - Add Authorized Ip</title>
      <link>https://dexterposh.github.io/posts/005-aks-tip-ip/</link>
      <pubDate>Fri, 01 May 2020 12:21:28 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/005-aks-tip-ip/</guid>
      <description>&lt;h2 id=&#34;background-&#34;&gt;Background üêº&lt;/h2&gt;
&lt;p&gt;Recently, I found out that there is no sane way to perform adding a public IP address to
the authorized IP address ranges using either the
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/aks/api-server-authorized-ip-ranges#update-a-clusters-api-server-authorized-ip-ranges&#34;&gt;Az CLI&lt;/a&gt;
or &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/az.aks/?view=azps-3.8.0&#34;&gt;Az.Aks&lt;/a&gt; PowerShell (no cmdlets available yet) module.&lt;/p&gt;
&lt;p&gt;From the official docs it says to use  something like below format with Az CLI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;az aks update &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --resource-group myResourceGroup &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --name myAKSCluster &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --api-server-authorized-ip-ranges 73.140.245.0/24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But it doesn&amp;rsquo;t tell you how to append the IP to the range, instead you need to
supply a comma separated value of public IP addresses.&lt;/p&gt;
&lt;h2 id=&#34;challenge-&#34;&gt;Challenge ‚òÅ&lt;/h2&gt;
&lt;p&gt;Well, this is can be done by using Az CLI with PowerShell or Bash and parsing
output then generating a comma separated string and passing it back to Az CLI
üòû&lt;/p&gt;
&lt;h2 id=&#34;solution-&#34;&gt;Solution ‚ö°&lt;/h2&gt;
&lt;p&gt;Often, when I am hit with such limitations with cmdlets or Az CLI making life
hard. I go back to using simply the 2 cmdlets provided by &lt;em&gt;Az.Resources&lt;/em&gt; module.&lt;/p&gt;
&lt;p&gt;Behold mighty!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Get-AzResource&lt;/em&gt; - Gets the Az resource&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Set-AzResource&lt;/em&gt; - Modifies the Az resource&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I ended up doing the below and creating a utility function out of it.&lt;/p&gt;
&lt;p&gt;First, get the AKS Cluster resource. Make sure to specify the &lt;strong&gt;-ExpandProperties&lt;/strong&gt;
switch to get back full fledged resource otherwise it returns a shallow instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ResourceGroup = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test-aks-rg&amp;#34;&lt;/span&gt;
$Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aksCluster001&amp;#34;&lt;/span&gt;
$IP = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;110.91.234.43&amp;#34;&lt;/span&gt;
$AksCluster = Get-AzResource -ResourceGroupName $ResourceGroup -Name $Name -ExpandProperties -ErrorAction Stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you have the resource, walk-through the properties and append the IP (+=
operator in PowerShell) to the local copy of the resource.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$orgClusterInfo.Properties.apiServerAccessProfile.authorizedIpRanges += $Ip

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, perform a Set operation by piping the modified local resource copy to
&lt;strong&gt;Set-AzResource&lt;/strong&gt; cmdlet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$orgClusterInfo | Set-AzResource -ErrorAction Stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;takeaway-&#34;&gt;Takeaway üî•&lt;/h2&gt;
&lt;p&gt;Even, when there are certain utility functions not available in the Az PowerShell
module. We can rely on the &lt;em&gt;`&lt;/em&gt;-Resource* cmdlets to work our way through.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure DevOps Tip - Job re-use within a Stage</title>
      <link>https://dexterposh.github.io/posts/004-azdo-tip-job/</link>
      <pubDate>Sun, 26 Apr 2020 09:53:50 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/004-azdo-tip-job/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Azure DevOps introduced multi-stage yaml pipelines a while ago. It allows us
to define our entire Build/Release landscape inside these yaml definitions.&lt;/p&gt;
&lt;p&gt;To re-iterate of some terms used in this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A pipeline comprises one or more stages&lt;/li&gt;
&lt;li&gt;Stage is collection of jobs&lt;/li&gt;
&lt;li&gt;Job runs on an agent/ agentless&lt;/li&gt;
&lt;li&gt;Job contains steps (task/script)&lt;/li&gt;
&lt;li&gt;Steps are the atomic unit to perform a task&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;challenge&#34;&gt;Challenge&lt;/h2&gt;
&lt;p&gt;Recently, working our multi-stage yaml pipelines, we hit an interesting
behavior with our job template re-use.&lt;/p&gt;
&lt;p&gt;We had quite few common steps we require to take in each stage (multiple times)
to hit an external API. So, to re-use we extracted them out as a job
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops&#34;&gt;template&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;jobtemplateyml&#34;&gt;jobtemplate.yml&lt;/h3&gt;
&lt;p&gt;For this post, creating a sample job and taking an
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/delay?view=azure-devops&#34;&gt;agentless delay task&lt;/a&gt; as an example but this job template can include
series of steps.&lt;/p&gt;
&lt;p&gt;Below is my extracted out job template definition (indues a delay) which I want to re-use within stages in my main &lt;strong&gt;azure-pipelines.yml&lt;/strong&gt; pipeline definition later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;parameters&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;windows&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;jobs&lt;/span&gt;:
  - &lt;span style=&#34;color:#66d9ef&#34;&gt;job&lt;/span&gt;: commonJob
    &lt;span style=&#34;color:#66d9ef&#34;&gt;displayName&lt;/span&gt;: Common Job
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pool&lt;/span&gt;: server
    &lt;span style=&#34;color:#66d9ef&#34;&gt;steps&lt;/span&gt;:
    - &lt;span style=&#34;color:#66d9ef&#34;&gt;task&lt;/span&gt;: Delay@&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Delay by 1 minutes for ${{ parameters.name }}&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;inputs&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;delayForMinutes&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;azure-pipelinesyml&#34;&gt;azure-pipelines.yml&lt;/h3&gt;
&lt;p&gt;Now, I want to call my Job template from above inside two stages Build &amp;amp; Deploy
in the multi-stage yaml pipeline as below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;stages&lt;/span&gt;:
- &lt;span style=&#34;color:#66d9ef&#34;&gt;stage&lt;/span&gt;: Build
  &lt;span style=&#34;color:#66d9ef&#34;&gt;jobs&lt;/span&gt;:
  - &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;: ./jobtemplate.yml
  - &lt;span style=&#34;color:#66d9ef&#34;&gt;job&lt;/span&gt;: Build1

- &lt;span style=&#34;color:#66d9ef&#34;&gt;stage&lt;/span&gt;: Deploy
  &lt;span style=&#34;color:#66d9ef&#34;&gt;jobs&lt;/span&gt;:
    - &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;: ./jobtemplate.yml
    - &lt;span style=&#34;color:#66d9ef&#34;&gt;job&lt;/span&gt;: Deploy1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kick off a build for this and you would see it in the AzDO portal, that it works
out well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/004/jobWithinDiffStages.png&#34; alt=&#34;Same Job template used with diffn stages&#34;&gt;&lt;/p&gt;
&lt;p&gt;But, if I try to use the same Job template multiple times within the same stage
that is when things get interesting. Let&amp;rsquo;s modify our &lt;strong&gt;azure-pipelines.yml&lt;/strong&gt; definition now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;stages&lt;/span&gt;:
- &lt;span style=&#34;color:#66d9ef&#34;&gt;stage&lt;/span&gt;: Build
  &lt;span style=&#34;color:#66d9ef&#34;&gt;jobs&lt;/span&gt;:
  - &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;: ./jobtemplate.yml
    &lt;span style=&#34;color:#66d9ef&#34;&gt;parameters&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: Deepak
  - &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;: ./jobtemplate.yml
    &lt;span style=&#34;color:#66d9ef&#34;&gt;parameters&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: Dhami
  - &lt;span style=&#34;color:#66d9ef&#34;&gt;job&lt;/span&gt;: Build1

- &lt;span style=&#34;color:#66d9ef&#34;&gt;stage&lt;/span&gt;: Deploy
  &lt;span style=&#34;color:#66d9ef&#34;&gt;jobs&lt;/span&gt;:
    - &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;: ./jobtemplate.yml
    - &lt;span style=&#34;color:#66d9ef&#34;&gt;job&lt;/span&gt;: Deploy1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Try running this new modified pipeline and you would be greeted with the below
in the portal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/004/nameCollision.png&#34; alt=&#34;Job name not unique&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is quite obvious but the job names in a stage should be unique.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;To get to a solution we looked at generating a unique name for our jobs but
it turns out there is a very simple solution to this problem.&lt;/p&gt;
&lt;p&gt;One can remove the job identifier in the job template completely while
extracting out jobs to re-use.&lt;/p&gt;
&lt;p&gt;What this means is we had to modify our Job templates like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;parameters&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;windows&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;jobs&lt;/span&gt;:
  - &lt;span style=&#34;color:#66d9ef&#34;&gt;job&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# Identifier here is removed&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;displayName&lt;/span&gt;: Common Job
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pool&lt;/span&gt;: server
    &lt;span style=&#34;color:#66d9ef&#34;&gt;steps&lt;/span&gt;:
    - &lt;span style=&#34;color:#66d9ef&#34;&gt;task&lt;/span&gt;: Delay@&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Delay by 1 minutes for ${{ parameters.name }}&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;inputs&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;delayForMinutes&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, it works.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/004/jobReuse.png&#34; alt=&#34;Job re-use within same stage&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As a general practice, when I start extracting out steps as independent job
templates I tend to not populate the Job identifier if it&amp;rsquo;s scope is to be
re-used multiple times in the same stage.&lt;/p&gt;
&lt;p&gt;But if there is a job which you want to ensure that it is allowed to run only
once, you could stick with populating the field.&lt;/p&gt;
&lt;p&gt;So, as every engineer building solution says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It depends on the use-case&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Azure DevOps Tip - Find private APIs</title>
      <link>https://dexterposh.github.io/posts/002-azdo-tip-api/</link>
      <pubDate>Tue, 14 Apr 2020 15:06:22 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/002-azdo-tip-api/</guid>
      <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Often working with Azure DevOps, I hit a wall trying to automate some tasks but
there are no REST APIs made public yet.&lt;/p&gt;
&lt;p&gt;It was one of those task of automating creation of Environments in multi-stage
YAML based pipelines in AzDO.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/env.png&#34; alt=&#34;Azure DevOps environments&#34;&gt;&lt;/p&gt;
&lt;p&gt;Quick research reveals that this has been requested in &lt;a href=&#34;https://developercommunity.visualstudio.com/content/problem/820737/rest-apis-for-environments-and-its-resources-multi.html&#34;&gt;uservoice&lt;/a&gt; (please upvote).
Let&amp;rsquo;s see one of the very simple ways to discover some of these APIs.&lt;/p&gt;
&lt;h2 id=&#34;developers-tools-to-rescue&#34;&gt;Developers Tools to rescue&lt;/h2&gt;
&lt;p&gt;Using your browser&amp;rsquo;s developers tools you can actually inspect the HTTP requests
being made while performing an action in the web portal.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/devnetwork.png&#34; alt=&#34;Developer tools&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s click on the &amp;ldquo;Create Environment&amp;rdquo; button, fill out some dummy values,
hit create and keep an eye on the network tab in the developer tools.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/envcreatenetwork.png&#34; alt=&#34;Create env watch network&#34;&gt;&lt;/p&gt;
&lt;p&gt;We see some activity, it might take you some time to walk through what happened but in this case the top activity named &amp;ldquo;environments&amp;rdquo; has the required details.&lt;/p&gt;
&lt;p&gt;See below and note the URL &amp;amp; method used:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/analyzerequest.png&#34; alt=&#34;Analyze request sent&#34;&gt;&lt;/p&gt;
&lt;p&gt;Also, make note of the Json request in the payload.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/requestpayload.png&#34; alt=&#34;Request payload&#34;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s mostly it, fire up postman/PowerShell to make the API call to test this.&lt;/p&gt;
&lt;h2 id=&#34;invoke-restmethod-in-pwsh&#34;&gt;Invoke-RestMethod in Pwsh&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&amp;amp;tabs=preview-page&#34;&gt;Generate a Personal Access Token&lt;/a&gt; in AzDO, typically start with a short lived PAT token with full access and then nail down on the specific permissions you need.&lt;/p&gt;
&lt;p&gt;Below is the code snippet, I used with AzDO to hit the REST API endpoint:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$url = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://dev.azure.com/ddhami/BITPro.AzDeploy/_apis/distributedtask/environments&amp;#39;&lt;/span&gt;
$cred = Get-Credential -UserName &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vsts&amp;#39;&lt;/span&gt; -Message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Enter AzDO Personal Access Token with privs to create env&amp;#39;&lt;/span&gt;
$encodedValue = &lt;span style=&#34;color:#66d9ef&#34;&gt;[Convert]&lt;/span&gt;::ToBase64String(
            &lt;span style=&#34;color:#66d9ef&#34;&gt;[Text.Encoding]&lt;/span&gt;::ASCII.GetBytes(
                (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}:{1}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, $cred.GetNetworkCredential().Password)
            )
        )

$body = @{
  name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test-pwsh-env&amp;#39;&lt;/span&gt;;
  description = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test environment from APR&amp;#39;&lt;/span&gt;
} | ConvertTo-Json
$headers = @{
  Accept = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json;&amp;#39;&lt;/span&gt;;
  Authorization = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Basic {0}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt; $encodedValue
}

Invoke-RestMethod -Method POST -Uri $url -Body $body -Headers $headers -ContentType &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But when I execute the above code, it gives me an error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/pwsherror.png&#34; alt=&#34;Error thrown&#34;&gt;&lt;/p&gt;
&lt;p&gt;The error thrown is below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;innerException&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No api-version was supplied for the \&amp;#34;POST\&amp;#34; request. The version must be supplied either as part of the Accept header (e.g. \&amp;#34;application/json; api-version=1.0\&amp;#34;) or as a query parameter (e.g. \&amp;#34;?api-version=1.0\&amp;#34;).&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;typeName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Microsoft.VisualStudio.Services.WebApi.VssVersionNotSpecifiedException, Microsoft.VisualStudio.Services.WebApi&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;typeKey&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;VssVersionNotSpecifiedException&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;errorCode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;eventId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Read the error message, it explains that the api-version is missing. Also, looking back at the capture and see where the api-version was specified.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/apiversion.png&#34; alt=&#34;API Version in header&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make the same change in our code snippet to include API version in the
header.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$url = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://dev.azure.com/ddhami/BITPro.AzDeploy/_apis/distributedtask/environments&amp;#39;&lt;/span&gt;
$cred = Get-Credential -UserName &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vsts&amp;#39;&lt;/span&gt; -Message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Enter AzDO Personal Access Token with privs to create env&amp;#39;&lt;/span&gt;
$encodedValue = &lt;span style=&#34;color:#66d9ef&#34;&gt;[Convert]&lt;/span&gt;::ToBase64String(
            &lt;span style=&#34;color:#66d9ef&#34;&gt;[Text.Encoding]&lt;/span&gt;::ASCII.GetBytes(
                (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}:{1}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, $cred.GetNetworkCredential().Password)
            )
        )

$body = @{
  name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test-pwsh-env&amp;#39;&lt;/span&gt;;
  description = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test environment from APR&amp;#39;&lt;/span&gt;
} | ConvertTo-Json
$headers = @{
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;  Accept = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json;api-version=5.0-preview.1&amp;#39;&lt;/span&gt;;
&lt;/span&gt;  Authorization = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Basic {0}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt; $encodedValue
}

Invoke-RestMethod -Method POST -Uri $url -Body $body -Headers $headers -ContentType = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here I go, this finally works and using the similar API endpoint I can fetch the environments as well (GET request).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dexterposh.github.io/static/002/envsuccess.png&#34; alt=&#34;Env created success&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#1 Hello World</title>
      <link>https://dexterposh.github.io/posts/001-hello-world/</link>
      <pubDate>Tue, 14 Apr 2020 12:20:36 +0530</pubDate>
      
      <guid>https://dexterposh.github.io/posts/001-hello-world/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Write-Host -Object &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>